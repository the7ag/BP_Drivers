
US_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f00  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002030  08002030  00012030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002060  08002060  00012068  2**0
                  CONTENTS
  4 .ARM          00000000  08002060  08002060  00012068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002060  08002068  00012068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002060  08002060  00012060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002064  08002064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00012068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000000  08002068  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002068  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00012068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020ab  00000000  00000000  00012091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000aea  00000000  00000000  0001413c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000390  00000000  00000000  00014c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002f8  00000000  00000000  00014fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000186f  00000000  00000000  000152b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b4a  00000000  00000000  00016b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000065eb  00000000  00000000  00018669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001ec54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e9c  00000000  00000000  0001eca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08002018 	.word	0x08002018

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08002018 	.word	0x08002018

08000170 <__aeabi_dmul>:
 8000170:	b570      	push	{r4, r5, r6, lr}
 8000172:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000176:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800017a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800017e:	bf1d      	ittte	ne
 8000180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000184:	ea94 0f0c 	teqne	r4, ip
 8000188:	ea95 0f0c 	teqne	r5, ip
 800018c:	f000 f8de 	bleq	800034c <__aeabi_dmul+0x1dc>
 8000190:	442c      	add	r4, r5
 8000192:	ea81 0603 	eor.w	r6, r1, r3
 8000196:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800019e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a2:	bf18      	it	ne
 80001a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b0:	d038      	beq.n	8000224 <__aeabi_dmul+0xb4>
 80001b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001b6:	f04f 0500 	mov.w	r5, #0
 80001ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001c6:	f04f 0600 	mov.w	r6, #0
 80001ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ce:	f09c 0f00 	teq	ip, #0
 80001d2:	bf18      	it	ne
 80001d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001e4:	d204      	bcs.n	80001f0 <__aeabi_dmul+0x80>
 80001e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ea:	416d      	adcs	r5, r5
 80001ec:	eb46 0606 	adc.w	r6, r6, r6
 80001f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000200:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000204:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000208:	bf88      	it	hi
 800020a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800020e:	d81e      	bhi.n	800024e <__aeabi_dmul+0xde>
 8000210:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000214:	bf08      	it	eq
 8000216:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021a:	f150 0000 	adcs.w	r0, r0, #0
 800021e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000222:	bd70      	pop	{r4, r5, r6, pc}
 8000224:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000228:	ea46 0101 	orr.w	r1, r6, r1
 800022c:	ea40 0002 	orr.w	r0, r0, r2
 8000230:	ea81 0103 	eor.w	r1, r1, r3
 8000234:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000238:	bfc2      	ittt	gt
 800023a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800023e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000242:	bd70      	popgt	{r4, r5, r6, pc}
 8000244:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000248:	f04f 0e00 	mov.w	lr, #0
 800024c:	3c01      	subs	r4, #1
 800024e:	f300 80ab 	bgt.w	80003a8 <__aeabi_dmul+0x238>
 8000252:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000256:	bfde      	ittt	le
 8000258:	2000      	movle	r0, #0
 800025a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800025e:	bd70      	pople	{r4, r5, r6, pc}
 8000260:	f1c4 0400 	rsb	r4, r4, #0
 8000264:	3c20      	subs	r4, #32
 8000266:	da35      	bge.n	80002d4 <__aeabi_dmul+0x164>
 8000268:	340c      	adds	r4, #12
 800026a:	dc1b      	bgt.n	80002a4 <__aeabi_dmul+0x134>
 800026c:	f104 0414 	add.w	r4, r4, #20
 8000270:	f1c4 0520 	rsb	r5, r4, #32
 8000274:	fa00 f305 	lsl.w	r3, r0, r5
 8000278:	fa20 f004 	lsr.w	r0, r0, r4
 800027c:	fa01 f205 	lsl.w	r2, r1, r5
 8000280:	ea40 0002 	orr.w	r0, r0, r2
 8000284:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800028c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000290:	fa21 f604 	lsr.w	r6, r1, r4
 8000294:	eb42 0106 	adc.w	r1, r2, r6
 8000298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800029c:	bf08      	it	eq
 800029e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f1c4 040c 	rsb	r4, r4, #12
 80002a8:	f1c4 0520 	rsb	r5, r4, #32
 80002ac:	fa00 f304 	lsl.w	r3, r0, r4
 80002b0:	fa20 f005 	lsr.w	r0, r0, r5
 80002b4:	fa01 f204 	lsl.w	r2, r1, r4
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002cc:	bf08      	it	eq
 80002ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f205 	lsl.w	r2, r0, r5
 80002dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e0:	fa20 f304 	lsr.w	r3, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea43 0302 	orr.w	r3, r3, r2
 80002ec:	fa21 f004 	lsr.w	r0, r1, r4
 80002f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	fa21 f204 	lsr.w	r2, r1, r4
 80002f8:	ea20 0002 	bic.w	r0, r0, r2
 80002fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f094 0f00 	teq	r4, #0
 8000310:	d10f      	bne.n	8000332 <__aeabi_dmul+0x1c2>
 8000312:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000316:	0040      	lsls	r0, r0, #1
 8000318:	eb41 0101 	adc.w	r1, r1, r1
 800031c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3c01      	subeq	r4, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1a6>
 8000326:	ea41 0106 	orr.w	r1, r1, r6
 800032a:	f095 0f00 	teq	r5, #0
 800032e:	bf18      	it	ne
 8000330:	4770      	bxne	lr
 8000332:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	eb43 0303 	adc.w	r3, r3, r3
 800033c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000340:	bf08      	it	eq
 8000342:	3d01      	subeq	r5, #1
 8000344:	d0f7      	beq.n	8000336 <__aeabi_dmul+0x1c6>
 8000346:	ea43 0306 	orr.w	r3, r3, r6
 800034a:	4770      	bx	lr
 800034c:	ea94 0f0c 	teq	r4, ip
 8000350:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000354:	bf18      	it	ne
 8000356:	ea95 0f0c 	teqne	r5, ip
 800035a:	d00c      	beq.n	8000376 <__aeabi_dmul+0x206>
 800035c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000360:	bf18      	it	ne
 8000362:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000366:	d1d1      	bne.n	800030c <__aeabi_dmul+0x19c>
 8000368:	ea81 0103 	eor.w	r1, r1, r3
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	f04f 0000 	mov.w	r0, #0
 8000374:	bd70      	pop	{r4, r5, r6, pc}
 8000376:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037a:	bf06      	itte	eq
 800037c:	4610      	moveq	r0, r2
 800037e:	4619      	moveq	r1, r3
 8000380:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000384:	d019      	beq.n	80003ba <__aeabi_dmul+0x24a>
 8000386:	ea94 0f0c 	teq	r4, ip
 800038a:	d102      	bne.n	8000392 <__aeabi_dmul+0x222>
 800038c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000390:	d113      	bne.n	80003ba <__aeabi_dmul+0x24a>
 8000392:	ea95 0f0c 	teq	r5, ip
 8000396:	d105      	bne.n	80003a4 <__aeabi_dmul+0x234>
 8000398:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800039c:	bf1c      	itt	ne
 800039e:	4610      	movne	r0, r2
 80003a0:	4619      	movne	r1, r3
 80003a2:	d10a      	bne.n	80003ba <__aeabi_dmul+0x24a>
 80003a4:	ea81 0103 	eor.w	r1, r1, r3
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd70      	pop	{r4, r5, r6, pc}
 80003ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003c2:	bd70      	pop	{r4, r5, r6, pc}

080003c4 <__aeabi_fmul>:
 80003c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003cc:	bf1e      	ittt	ne
 80003ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003d2:	ea92 0f0c 	teqne	r2, ip
 80003d6:	ea93 0f0c 	teqne	r3, ip
 80003da:	d06f      	beq.n	80004bc <__aeabi_fmul+0xf8>
 80003dc:	441a      	add	r2, r3
 80003de:	ea80 0c01 	eor.w	ip, r0, r1
 80003e2:	0240      	lsls	r0, r0, #9
 80003e4:	bf18      	it	ne
 80003e6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ea:	d01e      	beq.n	800042a <__aeabi_fmul+0x66>
 80003ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003f0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003f4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003f8:	fba0 3101 	umull	r3, r1, r0, r1
 80003fc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000400:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000404:	bf3e      	ittt	cc
 8000406:	0049      	lslcc	r1, r1, #1
 8000408:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800040c:	005b      	lslcc	r3, r3, #1
 800040e:	ea40 0001 	orr.w	r0, r0, r1
 8000412:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000416:	2afd      	cmp	r2, #253	; 0xfd
 8000418:	d81d      	bhi.n	8000456 <__aeabi_fmul+0x92>
 800041a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800041e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000422:	bf08      	it	eq
 8000424:	f020 0001 	biceq.w	r0, r0, #1
 8000428:	4770      	bx	lr
 800042a:	f090 0f00 	teq	r0, #0
 800042e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000432:	bf08      	it	eq
 8000434:	0249      	lsleq	r1, r1, #9
 8000436:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800043a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800043e:	3a7f      	subs	r2, #127	; 0x7f
 8000440:	bfc2      	ittt	gt
 8000442:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000446:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800044a:	4770      	bxgt	lr
 800044c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	3a01      	subs	r2, #1
 8000456:	dc5d      	bgt.n	8000514 <__aeabi_fmul+0x150>
 8000458:	f112 0f19 	cmn.w	r2, #25
 800045c:	bfdc      	itt	le
 800045e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000462:	4770      	bxle	lr
 8000464:	f1c2 0200 	rsb	r2, r2, #0
 8000468:	0041      	lsls	r1, r0, #1
 800046a:	fa21 f102 	lsr.w	r1, r1, r2
 800046e:	f1c2 0220 	rsb	r2, r2, #32
 8000472:	fa00 fc02 	lsl.w	ip, r0, r2
 8000476:	ea5f 0031 	movs.w	r0, r1, rrx
 800047a:	f140 0000 	adc.w	r0, r0, #0
 800047e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000482:	bf08      	it	eq
 8000484:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000488:	4770      	bx	lr
 800048a:	f092 0f00 	teq	r2, #0
 800048e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000492:	bf02      	ittt	eq
 8000494:	0040      	lsleq	r0, r0, #1
 8000496:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800049a:	3a01      	subeq	r2, #1
 800049c:	d0f9      	beq.n	8000492 <__aeabi_fmul+0xce>
 800049e:	ea40 000c 	orr.w	r0, r0, ip
 80004a2:	f093 0f00 	teq	r3, #0
 80004a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004aa:	bf02      	ittt	eq
 80004ac:	0049      	lsleq	r1, r1, #1
 80004ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004b2:	3b01      	subeq	r3, #1
 80004b4:	d0f9      	beq.n	80004aa <__aeabi_fmul+0xe6>
 80004b6:	ea41 010c 	orr.w	r1, r1, ip
 80004ba:	e78f      	b.n	80003dc <__aeabi_fmul+0x18>
 80004bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	bf18      	it	ne
 80004c6:	ea93 0f0c 	teqne	r3, ip
 80004ca:	d00a      	beq.n	80004e2 <__aeabi_fmul+0x11e>
 80004cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004d0:	bf18      	it	ne
 80004d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004d6:	d1d8      	bne.n	800048a <__aeabi_fmul+0xc6>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	4770      	bx	lr
 80004e2:	f090 0f00 	teq	r0, #0
 80004e6:	bf17      	itett	ne
 80004e8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004ec:	4608      	moveq	r0, r1
 80004ee:	f091 0f00 	teqne	r1, #0
 80004f2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004f6:	d014      	beq.n	8000522 <__aeabi_fmul+0x15e>
 80004f8:	ea92 0f0c 	teq	r2, ip
 80004fc:	d101      	bne.n	8000502 <__aeabi_fmul+0x13e>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d10f      	bne.n	8000522 <__aeabi_fmul+0x15e>
 8000502:	ea93 0f0c 	teq	r3, ip
 8000506:	d103      	bne.n	8000510 <__aeabi_fmul+0x14c>
 8000508:	024b      	lsls	r3, r1, #9
 800050a:	bf18      	it	ne
 800050c:	4608      	movne	r0, r1
 800050e:	d108      	bne.n	8000522 <__aeabi_fmul+0x15e>
 8000510:	ea80 0001 	eor.w	r0, r0, r1
 8000514:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000518:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800051c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000520:	4770      	bx	lr
 8000522:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000526:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800052a:	4770      	bx	lr

0800052c <__aeabi_drsub>:
 800052c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e002      	b.n	8000538 <__adddf3>
 8000532:	bf00      	nop

08000534 <__aeabi_dsub>:
 8000534:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000538 <__adddf3>:
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800053e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000542:	ea94 0f05 	teq	r4, r5
 8000546:	bf08      	it	eq
 8000548:	ea90 0f02 	teqeq	r0, r2
 800054c:	bf1f      	itttt	ne
 800054e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000552:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000556:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800055a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800055e:	f000 80e2 	beq.w	8000726 <__adddf3+0x1ee>
 8000562:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000566:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800056a:	bfb8      	it	lt
 800056c:	426d      	neglt	r5, r5
 800056e:	dd0c      	ble.n	800058a <__adddf3+0x52>
 8000570:	442c      	add	r4, r5
 8000572:	ea80 0202 	eor.w	r2, r0, r2
 8000576:	ea81 0303 	eor.w	r3, r1, r3
 800057a:	ea82 0000 	eor.w	r0, r2, r0
 800057e:	ea83 0101 	eor.w	r1, r3, r1
 8000582:	ea80 0202 	eor.w	r2, r0, r2
 8000586:	ea81 0303 	eor.w	r3, r1, r3
 800058a:	2d36      	cmp	r5, #54	; 0x36
 800058c:	bf88      	it	hi
 800058e:	bd30      	pophi	{r4, r5, pc}
 8000590:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000594:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000598:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800059c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a0:	d002      	beq.n	80005a8 <__adddf3+0x70>
 80005a2:	4240      	negs	r0, r0
 80005a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005b4:	d002      	beq.n	80005bc <__adddf3+0x84>
 80005b6:	4252      	negs	r2, r2
 80005b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005bc:	ea94 0f05 	teq	r4, r5
 80005c0:	f000 80a7 	beq.w	8000712 <__adddf3+0x1da>
 80005c4:	f1a4 0401 	sub.w	r4, r4, #1
 80005c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005cc:	db0d      	blt.n	80005ea <__adddf3+0xb2>
 80005ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005d2:	fa22 f205 	lsr.w	r2, r2, r5
 80005d6:	1880      	adds	r0, r0, r2
 80005d8:	f141 0100 	adc.w	r1, r1, #0
 80005dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e0:	1880      	adds	r0, r0, r2
 80005e2:	fa43 f305 	asr.w	r3, r3, r5
 80005e6:	4159      	adcs	r1, r3
 80005e8:	e00e      	b.n	8000608 <__adddf3+0xd0>
 80005ea:	f1a5 0520 	sub.w	r5, r5, #32
 80005ee:	f10e 0e20 	add.w	lr, lr, #32
 80005f2:	2a01      	cmp	r2, #1
 80005f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f8:	bf28      	it	cs
 80005fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005fe:	fa43 f305 	asr.w	r3, r3, r5
 8000602:	18c0      	adds	r0, r0, r3
 8000604:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	d507      	bpl.n	800061e <__adddf3+0xe6>
 800060e:	f04f 0e00 	mov.w	lr, #0
 8000612:	f1dc 0c00 	rsbs	ip, ip, #0
 8000616:	eb7e 0000 	sbcs.w	r0, lr, r0
 800061a:	eb6e 0101 	sbc.w	r1, lr, r1
 800061e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000622:	d31b      	bcc.n	800065c <__adddf3+0x124>
 8000624:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000628:	d30c      	bcc.n	8000644 <__adddf3+0x10c>
 800062a:	0849      	lsrs	r1, r1, #1
 800062c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000630:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000634:	f104 0401 	add.w	r4, r4, #1
 8000638:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800063c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000640:	f080 809a 	bcs.w	8000778 <__adddf3+0x240>
 8000644:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000648:	bf08      	it	eq
 800064a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800064e:	f150 0000 	adcs.w	r0, r0, #0
 8000652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000656:	ea41 0105 	orr.w	r1, r1, r5
 800065a:	bd30      	pop	{r4, r5, pc}
 800065c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000660:	4140      	adcs	r0, r0
 8000662:	eb41 0101 	adc.w	r1, r1, r1
 8000666:	3c01      	subs	r4, #1
 8000668:	bf28      	it	cs
 800066a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800066e:	d2e9      	bcs.n	8000644 <__adddf3+0x10c>
 8000670:	f091 0f00 	teq	r1, #0
 8000674:	bf04      	itt	eq
 8000676:	4601      	moveq	r1, r0
 8000678:	2000      	moveq	r0, #0
 800067a:	fab1 f381 	clz	r3, r1
 800067e:	bf08      	it	eq
 8000680:	3320      	addeq	r3, #32
 8000682:	f1a3 030b 	sub.w	r3, r3, #11
 8000686:	f1b3 0220 	subs.w	r2, r3, #32
 800068a:	da0c      	bge.n	80006a6 <__adddf3+0x16e>
 800068c:	320c      	adds	r2, #12
 800068e:	dd08      	ble.n	80006a2 <__adddf3+0x16a>
 8000690:	f102 0c14 	add.w	ip, r2, #20
 8000694:	f1c2 020c 	rsb	r2, r2, #12
 8000698:	fa01 f00c 	lsl.w	r0, r1, ip
 800069c:	fa21 f102 	lsr.w	r1, r1, r2
 80006a0:	e00c      	b.n	80006bc <__adddf3+0x184>
 80006a2:	f102 0214 	add.w	r2, r2, #20
 80006a6:	bfd8      	it	le
 80006a8:	f1c2 0c20 	rsble	ip, r2, #32
 80006ac:	fa01 f102 	lsl.w	r1, r1, r2
 80006b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006b4:	bfdc      	itt	le
 80006b6:	ea41 010c 	orrle.w	r1, r1, ip
 80006ba:	4090      	lslle	r0, r2
 80006bc:	1ae4      	subs	r4, r4, r3
 80006be:	bfa2      	ittt	ge
 80006c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006c4:	4329      	orrge	r1, r5
 80006c6:	bd30      	popge	{r4, r5, pc}
 80006c8:	ea6f 0404 	mvn.w	r4, r4
 80006cc:	3c1f      	subs	r4, #31
 80006ce:	da1c      	bge.n	800070a <__adddf3+0x1d2>
 80006d0:	340c      	adds	r4, #12
 80006d2:	dc0e      	bgt.n	80006f2 <__adddf3+0x1ba>
 80006d4:	f104 0414 	add.w	r4, r4, #20
 80006d8:	f1c4 0220 	rsb	r2, r4, #32
 80006dc:	fa20 f004 	lsr.w	r0, r0, r4
 80006e0:	fa01 f302 	lsl.w	r3, r1, r2
 80006e4:	ea40 0003 	orr.w	r0, r0, r3
 80006e8:	fa21 f304 	lsr.w	r3, r1, r4
 80006ec:	ea45 0103 	orr.w	r1, r5, r3
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	f1c4 040c 	rsb	r4, r4, #12
 80006f6:	f1c4 0220 	rsb	r2, r4, #32
 80006fa:	fa20 f002 	lsr.w	r0, r0, r2
 80006fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000702:	ea40 0003 	orr.w	r0, r0, r3
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	fa21 f004 	lsr.w	r0, r1, r4
 800070e:	4629      	mov	r1, r5
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	f094 0f00 	teq	r4, #0
 8000716:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800071a:	bf06      	itte	eq
 800071c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000720:	3401      	addeq	r4, #1
 8000722:	3d01      	subne	r5, #1
 8000724:	e74e      	b.n	80005c4 <__adddf3+0x8c>
 8000726:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800072a:	bf18      	it	ne
 800072c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000730:	d029      	beq.n	8000786 <__adddf3+0x24e>
 8000732:	ea94 0f05 	teq	r4, r5
 8000736:	bf08      	it	eq
 8000738:	ea90 0f02 	teqeq	r0, r2
 800073c:	d005      	beq.n	800074a <__adddf3+0x212>
 800073e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000742:	bf04      	itt	eq
 8000744:	4619      	moveq	r1, r3
 8000746:	4610      	moveq	r0, r2
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	ea91 0f03 	teq	r1, r3
 800074e:	bf1e      	ittt	ne
 8000750:	2100      	movne	r1, #0
 8000752:	2000      	movne	r0, #0
 8000754:	bd30      	popne	{r4, r5, pc}
 8000756:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800075a:	d105      	bne.n	8000768 <__adddf3+0x230>
 800075c:	0040      	lsls	r0, r0, #1
 800075e:	4149      	adcs	r1, r1
 8000760:	bf28      	it	cs
 8000762:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000766:	bd30      	pop	{r4, r5, pc}
 8000768:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800076c:	bf3c      	itt	cc
 800076e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000772:	bd30      	popcc	{r4, r5, pc}
 8000774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000778:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800077c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800078a:	bf1a      	itte	ne
 800078c:	4619      	movne	r1, r3
 800078e:	4610      	movne	r0, r2
 8000790:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000794:	bf1c      	itt	ne
 8000796:	460b      	movne	r3, r1
 8000798:	4602      	movne	r2, r0
 800079a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800079e:	bf06      	itte	eq
 80007a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007a4:	ea91 0f03 	teqeq	r1, r3
 80007a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007ac:	bd30      	pop	{r4, r5, pc}
 80007ae:	bf00      	nop

080007b0 <__aeabi_ui2d>:
 80007b0:	f090 0f00 	teq	r0, #0
 80007b4:	bf04      	itt	eq
 80007b6:	2100      	moveq	r1, #0
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c4:	f04f 0500 	mov.w	r5, #0
 80007c8:	f04f 0100 	mov.w	r1, #0
 80007cc:	e750      	b.n	8000670 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_i2d>:
 80007d0:	f090 0f00 	teq	r0, #0
 80007d4:	bf04      	itt	eq
 80007d6:	2100      	moveq	r1, #0
 80007d8:	4770      	bxeq	lr
 80007da:	b530      	push	{r4, r5, lr}
 80007dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007e8:	bf48      	it	mi
 80007ea:	4240      	negmi	r0, r0
 80007ec:	f04f 0100 	mov.w	r1, #0
 80007f0:	e73e      	b.n	8000670 <__adddf3+0x138>
 80007f2:	bf00      	nop

080007f4 <__aeabi_f2d>:
 80007f4:	0042      	lsls	r2, r0, #1
 80007f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80007fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000802:	bf1f      	itttt	ne
 8000804:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000808:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800080c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000810:	4770      	bxne	lr
 8000812:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000816:	bf08      	it	eq
 8000818:	4770      	bxeq	lr
 800081a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800081e:	bf04      	itt	eq
 8000820:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000824:	4770      	bxeq	lr
 8000826:	b530      	push	{r4, r5, lr}
 8000828:	f44f 7460 	mov.w	r4, #896	; 0x380
 800082c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000834:	e71c      	b.n	8000670 <__adddf3+0x138>
 8000836:	bf00      	nop

08000838 <__aeabi_ul2d>:
 8000838:	ea50 0201 	orrs.w	r2, r0, r1
 800083c:	bf08      	it	eq
 800083e:	4770      	bxeq	lr
 8000840:	b530      	push	{r4, r5, lr}
 8000842:	f04f 0500 	mov.w	r5, #0
 8000846:	e00a      	b.n	800085e <__aeabi_l2d+0x16>

08000848 <__aeabi_l2d>:
 8000848:	ea50 0201 	orrs.w	r2, r0, r1
 800084c:	bf08      	it	eq
 800084e:	4770      	bxeq	lr
 8000850:	b530      	push	{r4, r5, lr}
 8000852:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000856:	d502      	bpl.n	800085e <__aeabi_l2d+0x16>
 8000858:	4240      	negs	r0, r0
 800085a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800085e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000862:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000866:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800086a:	f43f aed8 	beq.w	800061e <__adddf3+0xe6>
 800086e:	f04f 0203 	mov.w	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087e:	bf18      	it	ne
 8000880:	3203      	addne	r2, #3
 8000882:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000886:	f1c2 0320 	rsb	r3, r2, #32
 800088a:	fa00 fc03 	lsl.w	ip, r0, r3
 800088e:	fa20 f002 	lsr.w	r0, r0, r2
 8000892:	fa01 fe03 	lsl.w	lr, r1, r3
 8000896:	ea40 000e 	orr.w	r0, r0, lr
 800089a:	fa21 f102 	lsr.w	r1, r1, r2
 800089e:	4414      	add	r4, r2
 80008a0:	e6bd      	b.n	800061e <__adddf3+0xe6>
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2uiz>:
 80008a4:	004a      	lsls	r2, r1, #1
 80008a6:	d211      	bcs.n	80008cc <__aeabi_d2uiz+0x28>
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ac:	d211      	bcs.n	80008d2 <__aeabi_d2uiz+0x2e>
 80008ae:	d50d      	bpl.n	80008cc <__aeabi_d2uiz+0x28>
 80008b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d40e      	bmi.n	80008d8 <__aeabi_d2uiz+0x34>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	fa23 f002 	lsr.w	r0, r3, r2
 80008ca:	4770      	bx	lr
 80008cc:	f04f 0000 	mov.w	r0, #0
 80008d0:	4770      	bx	lr
 80008d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008d6:	d102      	bne.n	80008de <__aeabi_d2uiz+0x3a>
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	4770      	bx	lr
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	4770      	bx	lr

080008e4 <__aeabi_frsub>:
 80008e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80008e8:	e002      	b.n	80008f0 <__addsf3>
 80008ea:	bf00      	nop

080008ec <__aeabi_fsub>:
 80008ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080008f0 <__addsf3>:
 80008f0:	0042      	lsls	r2, r0, #1
 80008f2:	bf1f      	itttt	ne
 80008f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008f8:	ea92 0f03 	teqne	r2, r3
 80008fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000900:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000904:	d06a      	beq.n	80009dc <__addsf3+0xec>
 8000906:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800090a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800090e:	bfc1      	itttt	gt
 8000910:	18d2      	addgt	r2, r2, r3
 8000912:	4041      	eorgt	r1, r0
 8000914:	4048      	eorgt	r0, r1
 8000916:	4041      	eorgt	r1, r0
 8000918:	bfb8      	it	lt
 800091a:	425b      	neglt	r3, r3
 800091c:	2b19      	cmp	r3, #25
 800091e:	bf88      	it	hi
 8000920:	4770      	bxhi	lr
 8000922:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000926:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800092a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800092e:	bf18      	it	ne
 8000930:	4240      	negne	r0, r0
 8000932:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000936:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800093a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800093e:	bf18      	it	ne
 8000940:	4249      	negne	r1, r1
 8000942:	ea92 0f03 	teq	r2, r3
 8000946:	d03f      	beq.n	80009c8 <__addsf3+0xd8>
 8000948:	f1a2 0201 	sub.w	r2, r2, #1
 800094c:	fa41 fc03 	asr.w	ip, r1, r3
 8000950:	eb10 000c 	adds.w	r0, r0, ip
 8000954:	f1c3 0320 	rsb	r3, r3, #32
 8000958:	fa01 f103 	lsl.w	r1, r1, r3
 800095c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000960:	d502      	bpl.n	8000968 <__addsf3+0x78>
 8000962:	4249      	negs	r1, r1
 8000964:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000968:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800096c:	d313      	bcc.n	8000996 <__addsf3+0xa6>
 800096e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000972:	d306      	bcc.n	8000982 <__addsf3+0x92>
 8000974:	0840      	lsrs	r0, r0, #1
 8000976:	ea4f 0131 	mov.w	r1, r1, rrx
 800097a:	f102 0201 	add.w	r2, r2, #1
 800097e:	2afe      	cmp	r2, #254	; 0xfe
 8000980:	d251      	bcs.n	8000a26 <__addsf3+0x136>
 8000982:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000986:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800098a:	bf08      	it	eq
 800098c:	f020 0001 	biceq.w	r0, r0, #1
 8000990:	ea40 0003 	orr.w	r0, r0, r3
 8000994:	4770      	bx	lr
 8000996:	0049      	lsls	r1, r1, #1
 8000998:	eb40 0000 	adc.w	r0, r0, r0
 800099c:	3a01      	subs	r2, #1
 800099e:	bf28      	it	cs
 80009a0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009a4:	d2ed      	bcs.n	8000982 <__addsf3+0x92>
 80009a6:	fab0 fc80 	clz	ip, r0
 80009aa:	f1ac 0c08 	sub.w	ip, ip, #8
 80009ae:	ebb2 020c 	subs.w	r2, r2, ip
 80009b2:	fa00 f00c 	lsl.w	r0, r0, ip
 80009b6:	bfaa      	itet	ge
 80009b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009bc:	4252      	neglt	r2, r2
 80009be:	4318      	orrge	r0, r3
 80009c0:	bfbc      	itt	lt
 80009c2:	40d0      	lsrlt	r0, r2
 80009c4:	4318      	orrlt	r0, r3
 80009c6:	4770      	bx	lr
 80009c8:	f092 0f00 	teq	r2, #0
 80009cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009d0:	bf06      	itte	eq
 80009d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009d6:	3201      	addeq	r2, #1
 80009d8:	3b01      	subne	r3, #1
 80009da:	e7b5      	b.n	8000948 <__addsf3+0x58>
 80009dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009e4:	bf18      	it	ne
 80009e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ea:	d021      	beq.n	8000a30 <__addsf3+0x140>
 80009ec:	ea92 0f03 	teq	r2, r3
 80009f0:	d004      	beq.n	80009fc <__addsf3+0x10c>
 80009f2:	f092 0f00 	teq	r2, #0
 80009f6:	bf08      	it	eq
 80009f8:	4608      	moveq	r0, r1
 80009fa:	4770      	bx	lr
 80009fc:	ea90 0f01 	teq	r0, r1
 8000a00:	bf1c      	itt	ne
 8000a02:	2000      	movne	r0, #0
 8000a04:	4770      	bxne	lr
 8000a06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a0a:	d104      	bne.n	8000a16 <__addsf3+0x126>
 8000a0c:	0040      	lsls	r0, r0, #1
 8000a0e:	bf28      	it	cs
 8000a10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a14:	4770      	bx	lr
 8000a16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a1a:	bf3c      	itt	cc
 8000a1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a20:	4770      	bxcc	lr
 8000a22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a2e:	4770      	bx	lr
 8000a30:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a34:	bf16      	itet	ne
 8000a36:	4608      	movne	r0, r1
 8000a38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a3c:	4601      	movne	r1, r0
 8000a3e:	0242      	lsls	r2, r0, #9
 8000a40:	bf06      	itte	eq
 8000a42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a46:	ea90 0f01 	teqeq	r0, r1
 8000a4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a4e:	4770      	bx	lr

08000a50 <__aeabi_ui2f>:
 8000a50:	f04f 0300 	mov.w	r3, #0
 8000a54:	e004      	b.n	8000a60 <__aeabi_i2f+0x8>
 8000a56:	bf00      	nop

08000a58 <__aeabi_i2f>:
 8000a58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a5c:	bf48      	it	mi
 8000a5e:	4240      	negmi	r0, r0
 8000a60:	ea5f 0c00 	movs.w	ip, r0
 8000a64:	bf08      	it	eq
 8000a66:	4770      	bxeq	lr
 8000a68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a6c:	4601      	mov	r1, r0
 8000a6e:	f04f 0000 	mov.w	r0, #0
 8000a72:	e01c      	b.n	8000aae <__aeabi_l2f+0x2a>

08000a74 <__aeabi_ul2f>:
 8000a74:	ea50 0201 	orrs.w	r2, r0, r1
 8000a78:	bf08      	it	eq
 8000a7a:	4770      	bxeq	lr
 8000a7c:	f04f 0300 	mov.w	r3, #0
 8000a80:	e00a      	b.n	8000a98 <__aeabi_l2f+0x14>
 8000a82:	bf00      	nop

08000a84 <__aeabi_l2f>:
 8000a84:	ea50 0201 	orrs.w	r2, r0, r1
 8000a88:	bf08      	it	eq
 8000a8a:	4770      	bxeq	lr
 8000a8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__aeabi_l2f+0x14>
 8000a92:	4240      	negs	r0, r0
 8000a94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a98:	ea5f 0c01 	movs.w	ip, r1
 8000a9c:	bf02      	ittt	eq
 8000a9e:	4684      	moveq	ip, r0
 8000aa0:	4601      	moveq	r1, r0
 8000aa2:	2000      	moveq	r0, #0
 8000aa4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000aae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ab2:	fabc f28c 	clz	r2, ip
 8000ab6:	3a08      	subs	r2, #8
 8000ab8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000abc:	db10      	blt.n	8000ae0 <__aeabi_l2f+0x5c>
 8000abe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ac2:	4463      	add	r3, ip
 8000ac4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ac8:	f1c2 0220 	rsb	r2, r2, #32
 8000acc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ad0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad4:	eb43 0002 	adc.w	r0, r3, r2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f102 0220 	add.w	r2, r2, #32
 8000ae4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ae8:	f1c2 0220 	rsb	r2, r2, #32
 8000aec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000af0:	fa21 f202 	lsr.w	r2, r1, r2
 8000af4:	eb43 0002 	adc.w	r0, r3, r2
 8000af8:	bf08      	it	eq
 8000afa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_f2iz>:
 8000b00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b04:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b08:	d30f      	bcc.n	8000b2a <__aeabi_f2iz+0x2a>
 8000b0a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b0e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_f2iz+0x30>
 8000b14:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b20:	fa23 f002 	lsr.w	r0, r3, r2
 8000b24:	bf18      	it	ne
 8000b26:	4240      	negne	r0, r0
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr
 8000b30:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b34:	d101      	bne.n	8000b3a <__aeabi_f2iz+0x3a>
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	d105      	bne.n	8000b46 <__aeabi_f2iz+0x46>
 8000b3a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b3e:	bf08      	it	eq
 8000b40:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_f2uiz>:
 8000b4c:	0042      	lsls	r2, r0, #1
 8000b4e:	d20e      	bcs.n	8000b6e <__aeabi_f2uiz+0x22>
 8000b50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b54:	d30b      	bcc.n	8000b6e <__aeabi_f2uiz+0x22>
 8000b56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b5e:	d409      	bmi.n	8000b74 <__aeabi_f2uiz+0x28>
 8000b60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b68:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr
 8000b74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b78:	d101      	bne.n	8000b7e <__aeabi_f2uiz+0x32>
 8000b7a:	0242      	lsls	r2, r0, #9
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_f2uiz+0x38>
 8000b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <MCAL_AFIO_SetEXTIConfigration>:
#include "AFIO_interface.h"
#include "AFIO_private.h"
#include "AFIO_config.h"
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType MCAL_AFIO_SetEXTIConfigration(u8 Copy_Line , u8 Copy_PortMap)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	460a      	mov	r2, r1
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
    if (Copy_Line > 15 || Copy_PortMap > 2)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b0f      	cmp	r3, #15
 8000ba4:	d802      	bhi.n	8000bac <MCAL_AFIO_SetEXTIConfigration+0x20>
 8000ba6:	79bb      	ldrb	r3, [r7, #6]
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d901      	bls.n	8000bb0 <MCAL_AFIO_SetEXTIConfigration+0x24>
    {
        return Local_FunctionStatus;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	e02c      	b.n	8000c0a <MCAL_AFIO_SetEXTIConfigration+0x7e>
    }
    u8 Local_RegIndex = Copy_Line/4;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	73bb      	strb	r3, [r7, #14]

    Copy_Line %= 4;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	71fb      	strb	r3, [r7, #7]

    AFIO->EXTICR[Local_RegIndex] &= ~((0x0f) <<  (Copy_Line * 4) );
 8000bbe:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <MCAL_AFIO_SetEXTIConfigration+0x88>)
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	210f      	movs	r1, #15
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	490f      	ldr	r1, [pc, #60]	; (8000c14 <MCAL_AFIO_SetEXTIConfigration+0x88>)
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	4002      	ands	r2, r0
 8000bdc:	3302      	adds	r3, #2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    AFIO->EXTICR[Local_RegIndex] |= ((Copy_PortMap) <<  (Copy_Line * 4) );
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <MCAL_AFIO_SetEXTIConfigration+0x88>)
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	3302      	adds	r3, #2
 8000be8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bec:	79b9      	ldrb	r1, [r7, #6]
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	4906      	ldr	r1, [pc, #24]	; (8000c14 <MCAL_AFIO_SetEXTIConfigration+0x88>)
 8000bfa:	7bbb      	ldrb	r3, [r7, #14]
 8000bfc:	4302      	orrs	r2, r0
 8000bfe:	3302      	adds	r3, #2
 8000c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    Local_FunctionStatus= E_OK;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
    
    return Local_FunctionStatus;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40010000 	.word	0x40010000

08000c18 <MCAL_EXTI_EnableLine>:
    return Local_FunctionStatus;
}
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType MCAL_EXTI_EnableLine(u8 Copy_Line)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]
    if (Copy_Line < EXTI_LINES_COUNT)
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80c      	bhi.n	8000c46 <MCAL_EXTI_EnableLine+0x2e>
    {
        
        SET_BIT( EXTI->IMR , Copy_Line );
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MCAL_EXTI_EnableLine+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	79fa      	ldrb	r2, [r7, #7]
 8000c32:	2101      	movs	r1, #1
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <MCAL_EXTI_EnableLine+0x40>)
 8000c3c:	430b      	orrs	r3, r1
 8000c3e:	6013      	str	r3, [r2, #0]
        Local_FunctionStatus = E_OK;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e001      	b.n	8000c4a <MCAL_EXTI_EnableLine+0x32>
    }else
    {
        Local_FunctionStatus = E_NOT_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	73fb      	strb	r3, [r7, #15]
    }
    return Local_FunctionStatus;
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40010400 	.word	0x40010400

08000c5c <MCAL_EXTI_DisableLine>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType MCAL_EXTI_DisableLine(u8 Copy_Line)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
    if (Copy_Line < EXTI_LINES_COUNT)
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d80d      	bhi.n	8000c8c <MCAL_EXTI_DisableLine+0x30>
    {
        
        CLR_BIT( EXTI->IMR , Copy_Line );
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <MCAL_EXTI_DisableLine+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	79fa      	ldrb	r2, [r7, #7]
 8000c76:	2101      	movs	r1, #1
 8000c78:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7c:	43d2      	mvns	r2, r2
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <MCAL_EXTI_DisableLine+0x40>)
 8000c82:	400b      	ands	r3, r1
 8000c84:	6013      	str	r3, [r2, #0]
        Local_FunctionStatus = E_OK;
 8000c86:	2301      	movs	r3, #1
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e001      	b.n	8000c90 <MCAL_EXTI_DisableLine+0x34>
    }else
    {
        Local_FunctionStatus = E_NOT_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
    }
    return Local_FunctionStatus;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40010400 	.word	0x40010400

08000ca0 <MCAL_EXTI_SetTrigger>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType MCAL_EXTI_SetTrigger(u8 Copy_Line , u8 TriggerType)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	460a      	mov	r2, r1
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	4613      	mov	r3, r2
 8000cae:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
    if (Copy_Line < EXTI_LINES_COUNT)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b0f      	cmp	r3, #15
 8000cb8:	d853      	bhi.n	8000d62 <MCAL_EXTI_SetTrigger+0xc2>
    {
        switch (TriggerType)
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d036      	beq.n	8000d2e <MCAL_EXTI_SetTrigger+0x8e>
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	dc4b      	bgt.n	8000d5c <MCAL_EXTI_SetTrigger+0xbc>
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d002      	beq.n	8000cce <MCAL_EXTI_SetTrigger+0x2e>
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d018      	beq.n	8000cfe <MCAL_EXTI_SetTrigger+0x5e>
 8000ccc:	e046      	b.n	8000d5c <MCAL_EXTI_SetTrigger+0xbc>
        {
        case EXTI_RISING_EDGE:
            SET_BIT(EXTI->RTSR , Copy_Line);
 8000cce:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <MCAL_EXTI_SetTrigger+0xd4>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	79fa      	ldrb	r2, [r7, #7]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4a25      	ldr	r2, [pc, #148]	; (8000d74 <MCAL_EXTI_SetTrigger+0xd4>)
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	6093      	str	r3, [r2, #8]
            CLR_BIT(EXTI->FTSR , Copy_Line);
 8000ce2:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <MCAL_EXTI_SetTrigger+0xd4>)
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	79fa      	ldrb	r2, [r7, #7]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fa01 f202 	lsl.w	r2, r1, r2
 8000cee:	43d2      	mvns	r2, r2
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4a20      	ldr	r2, [pc, #128]	; (8000d74 <MCAL_EXTI_SetTrigger+0xd4>)
 8000cf4:	400b      	ands	r3, r1
 8000cf6:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
            break;
 8000cfc:	e033      	b.n	8000d66 <MCAL_EXTI_SetTrigger+0xc6>
        case EXTI_FALLING_EDGE:
            CLR_BIT(EXTI->RTSR , Copy_Line);
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <MCAL_EXTI_SetTrigger+0xd4>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	79fa      	ldrb	r2, [r7, #7]
 8000d04:	2101      	movs	r1, #1
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	43d2      	mvns	r2, r2
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <MCAL_EXTI_SetTrigger+0xd4>)
 8000d10:	400b      	ands	r3, r1
 8000d12:	6093      	str	r3, [r2, #8]
            SET_BIT(EXTI->FTSR , Copy_Line);
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MCAL_EXTI_SetTrigger+0xd4>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	79fa      	ldrb	r2, [r7, #7]
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d20:	4611      	mov	r1, r2
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <MCAL_EXTI_SetTrigger+0xd4>)
 8000d24:	430b      	orrs	r3, r1
 8000d26:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	73fb      	strb	r3, [r7, #15]
            break;
 8000d2c:	e01b      	b.n	8000d66 <MCAL_EXTI_SetTrigger+0xc6>
        case EXTI_BOTH_EDGE:
            SET_BIT(EXTI->RTSR , Copy_Line);
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MCAL_EXTI_SetTrigger+0xd4>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	2101      	movs	r1, #1
 8000d36:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <MCAL_EXTI_SetTrigger+0xd4>)
 8000d3e:	430b      	orrs	r3, r1
 8000d40:	6093      	str	r3, [r2, #8]
            SET_BIT(EXTI->FTSR , Copy_Line);
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MCAL_EXTI_SetTrigger+0xd4>)
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	79fa      	ldrb	r2, [r7, #7]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <MCAL_EXTI_SetTrigger+0xd4>)
 8000d52:	430b      	orrs	r3, r1
 8000d54:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000d56:	2301      	movs	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
            break;
 8000d5a:	e004      	b.n	8000d66 <MCAL_EXTI_SetTrigger+0xc6>
        default:
            Local_FunctionStatus = E_NOT_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]
            break;
 8000d60:	e001      	b.n	8000d66 <MCAL_EXTI_SetTrigger+0xc6>
        }
    }else
    {
        Local_FunctionStatus = E_NOT_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	73fb      	strb	r3, [r7, #15]
    }
    return Local_FunctionStatus;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40010400 	.word	0x40010400

08000d78 <MCAL_EXTI_SetCallback>:
    return Local_FunctionStatus;
}
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType MCAL_EXTI_SetCallback(u8 Copy_Line , EXTI_CallbackFunc_t CallbackFunc)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000d84:	2300      	movs	r3, #0
 8000d86:	73fb      	strb	r3, [r7, #15]
    if(CallbackFunc == NULL)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <MCAL_EXTI_SetCallback+0x1a>
    {
        return Local_FunctionStatus;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	e007      	b.n	8000da2 <MCAL_EXTI_SetCallback+0x2a>
    }
    EXTI_Callback[Copy_Line] = CallbackFunc;
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4905      	ldr	r1, [pc, #20]	; (8000dac <MCAL_EXTI_SetCallback+0x34>)
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    Local_FunctionStatus = E_OK;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
    return Local_FunctionStatus;
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	2000001c 	.word	0x2000001c

08000db0 <EXTI0_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI0_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE0]();
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <EXTI0_IRQHandler+0x10>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4798      	blx	r3
    }
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000001c 	.word	0x2000001c

08000dc4 <EXTI1_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI1_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE1]();
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <EXTI1_IRQHandler+0x10>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	4798      	blx	r3
    }
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000001c 	.word	0x2000001c

08000dd8 <EXTI2_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE2]();
 8000ddc:	4b02      	ldr	r3, [pc, #8]	; (8000de8 <EXTI2_IRQHandler+0x10>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	4798      	blx	r3
    }
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2000001c 	.word	0x2000001c

08000dec <EXTI3_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI3_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE3]();
 8000df0:	4b02      	ldr	r3, [pc, #8]	; (8000dfc <EXTI3_IRQHandler+0x10>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	4798      	blx	r3
    }
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000001c 	.word	0x2000001c

08000e00 <EXTI4_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI4_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE4]();
 8000e04:	4b02      	ldr	r3, [pc, #8]	; (8000e10 <EXTI4_IRQHandler+0x10>)
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	4798      	blx	r3
    }
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000001c 	.word	0x2000001c

08000e14 <MCAL_GPIO_SetPinMode>:
#include "GPIO_private.h"
#include "GPIO_config.h"
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_GPIO_SetPinMode(u8 Copy_PortID , u8 Copy_PinID , u8 Copy_PinMode)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	71bb      	strb	r3, [r7, #6]
 8000e22:	4613      	mov	r3, r2
 8000e24:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73fb      	strb	r3, [r7, #15]
    switch (Copy_PortID)
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	f000 8088 	beq.w	8000f42 <MCAL_GPIO_SetPinMode+0x12e>
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	f300 80c5 	bgt.w	8000fc2 <MCAL_GPIO_SetPinMode+0x1ae>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d002      	beq.n	8000e42 <MCAL_GPIO_SetPinMode+0x2e>
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d040      	beq.n	8000ec2 <MCAL_GPIO_SetPinMode+0xae>
 8000e40:	e0bf      	b.n	8000fc2 <MCAL_GPIO_SetPinMode+0x1ae>
    {
    case GPIO_PORTA:
        if( Copy_PinID < 8 )
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	2b07      	cmp	r3, #7
 8000e46:	d819      	bhi.n	8000e7c <MCAL_GPIO_SetPinMode+0x68>
        {
            MCAL_GPIOA->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 8000e48:	4b62      	ldr	r3, [pc, #392]	; (8000fd4 <MCAL_GPIO_SetPinMode+0x1c0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	79ba      	ldrb	r2, [r7, #6]
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	210f      	movs	r1, #15
 8000e52:	fa01 f202 	lsl.w	r2, r1, r2
 8000e56:	43d2      	mvns	r2, r2
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4a5e      	ldr	r2, [pc, #376]	; (8000fd4 <MCAL_GPIO_SetPinMode+0x1c0>)
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	6013      	str	r3, [r2, #0]
            MCAL_GPIOA->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000e60:	4b5c      	ldr	r3, [pc, #368]	; (8000fd4 <MCAL_GPIO_SetPinMode+0x1c0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	7979      	ldrb	r1, [r7, #5]
 8000e66:	79ba      	ldrb	r2, [r7, #6]
 8000e68:	0092      	lsls	r2, r2, #2
 8000e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4a58      	ldr	r2, [pc, #352]	; (8000fd4 <MCAL_GPIO_SetPinMode+0x1c0>)
 8000e72:	430b      	orrs	r3, r1
 8000e74:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000e76:	2301      	movs	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 8000e7a:	e0a5      	b.n	8000fc8 <MCAL_GPIO_SetPinMode+0x1b4>
        }else if ( Copy_PinID < 16)
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	2b0f      	cmp	r3, #15
 8000e80:	d81c      	bhi.n	8000ebc <MCAL_GPIO_SetPinMode+0xa8>
            Copy_PinID=Copy_PinID-8;
 8000e82:	79bb      	ldrb	r3, [r7, #6]
 8000e84:	3b08      	subs	r3, #8
 8000e86:	71bb      	strb	r3, [r7, #6]
            MCAL_GPIOA->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 8000e88:	4b52      	ldr	r3, [pc, #328]	; (8000fd4 <MCAL_GPIO_SetPinMode+0x1c0>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	79ba      	ldrb	r2, [r7, #6]
 8000e8e:	0092      	lsls	r2, r2, #2
 8000e90:	210f      	movs	r1, #15
 8000e92:	fa01 f202 	lsl.w	r2, r1, r2
 8000e96:	43d2      	mvns	r2, r2
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4a4e      	ldr	r2, [pc, #312]	; (8000fd4 <MCAL_GPIO_SetPinMode+0x1c0>)
 8000e9c:	400b      	ands	r3, r1
 8000e9e:	6053      	str	r3, [r2, #4]
            MCAL_GPIOA->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000ea0:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <MCAL_GPIO_SetPinMode+0x1c0>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	7979      	ldrb	r1, [r7, #5]
 8000ea6:	79ba      	ldrb	r2, [r7, #6]
 8000ea8:	0092      	lsls	r2, r2, #2
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	4611      	mov	r1, r2
 8000eb0:	4a48      	ldr	r2, [pc, #288]	; (8000fd4 <MCAL_GPIO_SetPinMode+0x1c0>)
 8000eb2:	430b      	orrs	r3, r1
 8000eb4:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8000eba:	e085      	b.n	8000fc8 <MCAL_GPIO_SetPinMode+0x1b4>
            Local_FunctionStatus = E_NOT_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8000ec0:	e082      	b.n	8000fc8 <MCAL_GPIO_SetPinMode+0x1b4>
    case GPIO_PORTB:
        if( Copy_PinID < 8 )
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	2b07      	cmp	r3, #7
 8000ec6:	d819      	bhi.n	8000efc <MCAL_GPIO_SetPinMode+0xe8>
        {
            MCAL_GPIOB->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 8000ec8:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <MCAL_GPIO_SetPinMode+0x1c4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	79ba      	ldrb	r2, [r7, #6]
 8000ece:	0092      	lsls	r2, r2, #2
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed6:	43d2      	mvns	r2, r2
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4a3f      	ldr	r2, [pc, #252]	; (8000fd8 <MCAL_GPIO_SetPinMode+0x1c4>)
 8000edc:	400b      	ands	r3, r1
 8000ede:	6013      	str	r3, [r2, #0]
            MCAL_GPIOB->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000ee0:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <MCAL_GPIO_SetPinMode+0x1c4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	7979      	ldrb	r1, [r7, #5]
 8000ee6:	79ba      	ldrb	r2, [r7, #6]
 8000ee8:	0092      	lsls	r2, r2, #2
 8000eea:	fa01 f202 	lsl.w	r2, r1, r2
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4a39      	ldr	r2, [pc, #228]	; (8000fd8 <MCAL_GPIO_SetPinMode+0x1c4>)
 8000ef2:	430b      	orrs	r3, r1
 8000ef4:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 8000efa:	e065      	b.n	8000fc8 <MCAL_GPIO_SetPinMode+0x1b4>
        }else if ( Copy_PinID < 16)
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	2b0f      	cmp	r3, #15
 8000f00:	d81c      	bhi.n	8000f3c <MCAL_GPIO_SetPinMode+0x128>
            Copy_PinID=Copy_PinID-8;
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	3b08      	subs	r3, #8
 8000f06:	71bb      	strb	r3, [r7, #6]
            MCAL_GPIOB->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 8000f08:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <MCAL_GPIO_SetPinMode+0x1c4>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	79ba      	ldrb	r2, [r7, #6]
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	210f      	movs	r1, #15
 8000f12:	fa01 f202 	lsl.w	r2, r1, r2
 8000f16:	43d2      	mvns	r2, r2
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <MCAL_GPIO_SetPinMode+0x1c4>)
 8000f1c:	400b      	ands	r3, r1
 8000f1e:	6053      	str	r3, [r2, #4]
            MCAL_GPIOB->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <MCAL_GPIO_SetPinMode+0x1c4>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	7979      	ldrb	r1, [r7, #5]
 8000f26:	79ba      	ldrb	r2, [r7, #6]
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <MCAL_GPIO_SetPinMode+0x1c4>)
 8000f32:	430b      	orrs	r3, r1
 8000f34:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
    break;
 8000f3a:	e045      	b.n	8000fc8 <MCAL_GPIO_SetPinMode+0x1b4>
            Local_FunctionStatus = E_NOT_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8000f40:	e042      	b.n	8000fc8 <MCAL_GPIO_SetPinMode+0x1b4>
    case GPIO_PORTC:
        if( Copy_PinID < 8 )
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	2b07      	cmp	r3, #7
 8000f46:	d819      	bhi.n	8000f7c <MCAL_GPIO_SetPinMode+0x168>
        {
            MCAL_GPIOC->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <MCAL_GPIO_SetPinMode+0x1c8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	79ba      	ldrb	r2, [r7, #6]
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	210f      	movs	r1, #15
 8000f52:	fa01 f202 	lsl.w	r2, r1, r2
 8000f56:	43d2      	mvns	r2, r2
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <MCAL_GPIO_SetPinMode+0x1c8>)
 8000f5c:	400b      	ands	r3, r1
 8000f5e:	6013      	str	r3, [r2, #0]
            MCAL_GPIOC->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MCAL_GPIO_SetPinMode+0x1c8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	7979      	ldrb	r1, [r7, #5]
 8000f66:	79ba      	ldrb	r2, [r7, #6]
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <MCAL_GPIO_SetPinMode+0x1c8>)
 8000f72:	430b      	orrs	r3, r1
 8000f74:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000f76:	2301      	movs	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 8000f7a:	e025      	b.n	8000fc8 <MCAL_GPIO_SetPinMode+0x1b4>
        }else if ( Copy_PinID < 16)
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	d81c      	bhi.n	8000fbc <MCAL_GPIO_SetPinMode+0x1a8>
            Copy_PinID=Copy_PinID-8;
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	3b08      	subs	r3, #8
 8000f86:	71bb      	strb	r3, [r7, #6]
            MCAL_GPIOC->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MCAL_GPIO_SetPinMode+0x1c8>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	79ba      	ldrb	r2, [r7, #6]
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	210f      	movs	r1, #15
 8000f92:	fa01 f202 	lsl.w	r2, r1, r2
 8000f96:	43d2      	mvns	r2, r2
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <MCAL_GPIO_SetPinMode+0x1c8>)
 8000f9c:	400b      	ands	r3, r1
 8000f9e:	6053      	str	r3, [r2, #4]
            MCAL_GPIOC->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MCAL_GPIO_SetPinMode+0x1c8>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	7979      	ldrb	r1, [r7, #5]
 8000fa6:	79ba      	ldrb	r2, [r7, #6]
 8000fa8:	0092      	lsls	r2, r2, #2
 8000faa:	fa01 f202 	lsl.w	r2, r1, r2
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <MCAL_GPIO_SetPinMode+0x1c8>)
 8000fb2:	430b      	orrs	r3, r1
 8000fb4:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8000fba:	e005      	b.n	8000fc8 <MCAL_GPIO_SetPinMode+0x1b4>
            Local_FunctionStatus = E_NOT_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8000fc0:	e002      	b.n	8000fc8 <MCAL_GPIO_SetPinMode+0x1b4>
    default:
            Local_FunctionStatus = E_NOT_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8000fc6:	bf00      	nop
    }
    return Local_FunctionStatus;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	40011000 	.word	0x40011000

08000fe0 <MCAL_GPIO_SetPinValue>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_GPIO_SetPinValue(u8 Copy_PortID , u8 Copy_PinID , u8 Copy_PinValue)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	460b      	mov	r3, r1
 8000fec:	71bb      	strb	r3, [r7, #6]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
    switch (Copy_PortID)
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d04e      	beq.n	800109a <MCAL_GPIO_SetPinValue+0xba>
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	dc70      	bgt.n	80010e2 <MCAL_GPIO_SetPinValue+0x102>
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <MCAL_GPIO_SetPinValue+0x2a>
 8001004:	2b01      	cmp	r3, #1
 8001006:	d024      	beq.n	8001052 <MCAL_GPIO_SetPinValue+0x72>
 8001008:	e06b      	b.n	80010e2 <MCAL_GPIO_SetPinValue+0x102>
    {
    case GPIO_PORTA:
        switch (Copy_PinValue)
 800100a:	797b      	ldrb	r3, [r7, #5]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00e      	beq.n	800102e <MCAL_GPIO_SetPinValue+0x4e>
 8001010:	2b01      	cmp	r3, #1
 8001012:	d11a      	bne.n	800104a <MCAL_GPIO_SetPinValue+0x6a>
        {
        case GPIO_HIGH:
            SET_BIT( (MCAL_GPIOA->ODR) , Copy_PinID);
 8001014:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <MCAL_GPIO_SetPinValue+0x114>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	79ba      	ldrb	r2, [r7, #6]
 800101a:	2101      	movs	r1, #1
 800101c:	fa01 f202 	lsl.w	r2, r1, r2
 8001020:	4611      	mov	r1, r2
 8001022:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <MCAL_GPIO_SetPinValue+0x114>)
 8001024:	430b      	orrs	r3, r1
 8001026:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
            break;
 800102c:	e010      	b.n	8001050 <MCAL_GPIO_SetPinValue+0x70>
        case GPIO_LOW:
            CLR_BIT( (MCAL_GPIOA->ODR) , Copy_PinID);
 800102e:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <MCAL_GPIO_SetPinValue+0x114>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	79ba      	ldrb	r2, [r7, #6]
 8001034:	2101      	movs	r1, #1
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	43d2      	mvns	r2, r2
 800103c:	4611      	mov	r1, r2
 800103e:	4a2d      	ldr	r2, [pc, #180]	; (80010f4 <MCAL_GPIO_SetPinValue+0x114>)
 8001040:	400b      	ands	r3, r1
 8001042:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
            break;
 8001048:	e002      	b.n	8001050 <MCAL_GPIO_SetPinValue+0x70>
        default:
            Local_FunctionStatus = E_NOT_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
            break;
 800104e:	bf00      	nop
        }
    break;
 8001050:	e04a      	b.n	80010e8 <MCAL_GPIO_SetPinValue+0x108>
    case GPIO_PORTB:
        switch (Copy_PinValue)
 8001052:	797b      	ldrb	r3, [r7, #5]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00e      	beq.n	8001076 <MCAL_GPIO_SetPinValue+0x96>
 8001058:	2b01      	cmp	r3, #1
 800105a:	d11a      	bne.n	8001092 <MCAL_GPIO_SetPinValue+0xb2>
        {
        case GPIO_HIGH:
            SET_BIT(MCAL_GPIOB->ODR , Copy_PinID);
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <MCAL_GPIO_SetPinValue+0x118>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	79ba      	ldrb	r2, [r7, #6]
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f202 	lsl.w	r2, r1, r2
 8001068:	4611      	mov	r1, r2
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <MCAL_GPIO_SetPinValue+0x118>)
 800106c:	430b      	orrs	r3, r1
 800106e:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
            break;
 8001074:	e010      	b.n	8001098 <MCAL_GPIO_SetPinValue+0xb8>
        case GPIO_LOW:
            CLR_BIT(MCAL_GPIOB->ODR , Copy_PinID);
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <MCAL_GPIO_SetPinValue+0x118>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	79ba      	ldrb	r2, [r7, #6]
 800107c:	2101      	movs	r1, #1
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	43d2      	mvns	r2, r2
 8001084:	4611      	mov	r1, r2
 8001086:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <MCAL_GPIO_SetPinValue+0x118>)
 8001088:	400b      	ands	r3, r1
 800108a:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
            break;
 8001090:	e002      	b.n	8001098 <MCAL_GPIO_SetPinValue+0xb8>
        default:
            Local_FunctionStatus = E_NOT_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	73fb      	strb	r3, [r7, #15]
            break;
 8001096:	bf00      	nop
        }
    break;
 8001098:	e026      	b.n	80010e8 <MCAL_GPIO_SetPinValue+0x108>
    case GPIO_PORTC:
        switch (Copy_PinValue)
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00e      	beq.n	80010be <MCAL_GPIO_SetPinValue+0xde>
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d11a      	bne.n	80010da <MCAL_GPIO_SetPinValue+0xfa>
        {
        case GPIO_HIGH:
            SET_BIT(MCAL_GPIOC->ODR , Copy_PinID);
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <MCAL_GPIO_SetPinValue+0x11c>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	79ba      	ldrb	r2, [r7, #6]
 80010aa:	2101      	movs	r1, #1
 80010ac:	fa01 f202 	lsl.w	r2, r1, r2
 80010b0:	4611      	mov	r1, r2
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MCAL_GPIO_SetPinValue+0x11c>)
 80010b4:	430b      	orrs	r3, r1
 80010b6:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
            break;
 80010bc:	e010      	b.n	80010e0 <MCAL_GPIO_SetPinValue+0x100>
        case GPIO_LOW:
            CLR_BIT(MCAL_GPIOC->ODR , Copy_PinID);
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MCAL_GPIO_SetPinValue+0x11c>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	79ba      	ldrb	r2, [r7, #6]
 80010c4:	2101      	movs	r1, #1
 80010c6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ca:	43d2      	mvns	r2, r2
 80010cc:	4611      	mov	r1, r2
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <MCAL_GPIO_SetPinValue+0x11c>)
 80010d0:	400b      	ands	r3, r1
 80010d2:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
            break;
 80010d8:	e002      	b.n	80010e0 <MCAL_GPIO_SetPinValue+0x100>
        default:
            Local_FunctionStatus = E_NOT_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
            break;
 80010de:	bf00      	nop
        }
    break;
 80010e0:	e002      	b.n	80010e8 <MCAL_GPIO_SetPinValue+0x108>
    default:
        Local_FunctionStatus = E_NOT_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
        break;
 80010e6:	bf00      	nop
    }
    return Local_FunctionStatus;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40010800 	.word	0x40010800
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	40011000 	.word	0x40011000

08001100 <LCD_Init>:
/**
 * @brief Initializes the LCD driver based on the configured mode (8-bit or 4-bit).
 *
 * @retval Std_ReturnType returns E_OK if initialization is successful, E_NOK if an error occurs during initialization.
 */
Std_ReturnType LCD_Init(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
    // Variable to track the function status, initially set to E_NOT_OK
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	71fb      	strb	r3, [r7, #7]

    // Initialize the system tick timer
    MCAL_SYSTICK_vINIT();
 800110a:	f000 fa3d 	bl	8001588 <MCAL_SYSTICK_vINIT>
        // Update function status to indicate successful initialization
        Local_FunctionStatus = E_OK;

    #elif LCD_MODE == LCD_MODE_4_BIT
        // Set control pins and data pins for 4-bit mode
        MCAL_GPIO_SetPinMode(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 800110e:	2201      	movs	r2, #1
 8001110:	210b      	movs	r1, #11
 8001112:	2000      	movs	r0, #0
 8001114:	f7ff fe7e 	bl	8000e14 <MCAL_GPIO_SetPinMode>
        MCAL_GPIO_SetPinMode(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 8001118:	2201      	movs	r2, #1
 800111a:	210c      	movs	r1, #12
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff fe79 	bl	8000e14 <MCAL_GPIO_SetPinMode>
        MCAL_GPIO_SetPinMode(LCD_DATA_PORT, LCD_D4_PIN, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 8001122:	2201      	movs	r2, #1
 8001124:	2106      	movs	r1, #6
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fe74 	bl	8000e14 <MCAL_GPIO_SetPinMode>
        MCAL_GPIO_SetPinMode(LCD_DATA_PORT, LCD_D5_PIN, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 800112c:	2201      	movs	r2, #1
 800112e:	2107      	movs	r1, #7
 8001130:	2000      	movs	r0, #0
 8001132:	f7ff fe6f 	bl	8000e14 <MCAL_GPIO_SetPinMode>
        MCAL_GPIO_SetPinMode(LCD_DATA_PORT, LCD_D6_PIN, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 8001136:	2201      	movs	r2, #1
 8001138:	2108      	movs	r1, #8
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff fe6a 	bl	8000e14 <MCAL_GPIO_SetPinMode>
        MCAL_GPIO_SetPinMode(LCD_DATA_PORT, LCD_D7_PIN, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 8001140:	2201      	movs	r2, #1
 8001142:	2109      	movs	r1, #9
 8001144:	2000      	movs	r0, #0
 8001146:	f7ff fe65 	bl	8000e14 <MCAL_GPIO_SetPinMode>

        // Delay for LCD startup (30ms)
        MCAL_SYSTICK_DelayMS(30);
 800114a:	4816      	ldr	r0, [pc, #88]	; (80011a4 <LCD_Init+0xa4>)
 800114c:	f000 fb42 	bl	80017d4 <MCAL_SYSTICK_DelayMS>

        // LCD initialization sequence for 4-bit mode
        LCD_SendCmnd(LCD_HOME);
 8001150:	2002      	movs	r0, #2
 8001152:	f000 f829 	bl	80011a8 <LCD_SendCmnd>
        MCAL_SYSTICK_DelayMS(1);
 8001156:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800115a:	f000 fb3b 	bl	80017d4 <MCAL_SYSTICK_DelayMS>
        LCD_SendCmnd(LCD_FUNCTIONSET4BIT);
 800115e:	2028      	movs	r0, #40	; 0x28
 8001160:	f000 f822 	bl	80011a8 <LCD_SendCmnd>
        MCAL_SYSTICK_DelayMS(1);
 8001164:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001168:	f000 fb34 	bl	80017d4 <MCAL_SYSTICK_DelayMS>
        LCD_SendCmnd(LCD_DISPLAYON);
 800116c:	200c      	movs	r0, #12
 800116e:	f000 f81b 	bl	80011a8 <LCD_SendCmnd>
        MCAL_SYSTICK_DelayMS(1);
 8001172:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001176:	f000 fb2d 	bl	80017d4 <MCAL_SYSTICK_DelayMS>
        LCD_SendCmnd(LCD_CLEAR);
 800117a:	2001      	movs	r0, #1
 800117c:	f000 f814 	bl	80011a8 <LCD_SendCmnd>
        MCAL_SYSTICK_DelayMS(1);
 8001180:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001184:	f000 fb26 	bl	80017d4 <MCAL_SYSTICK_DelayMS>
        LCD_SendCmnd(LCD_ENTRYMODE);
 8001188:	2006      	movs	r0, #6
 800118a:	f000 f80d 	bl	80011a8 <LCD_SendCmnd>
        MCAL_SYSTICK_DelayMS(1);
 800118e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001192:	f000 fb1f 	bl	80017d4 <MCAL_SYSTICK_DelayMS>

        // Update function status to indicate successful initialization
        Local_FunctionStatus = E_OK;
 8001196:	2301      	movs	r3, #1
 8001198:	71fb      	strb	r3, [r7, #7]
        Local_FunctionStatus = E_NOT_OK;

    #endif

    // Return the function status indicating the success or failure of the initialization
    return Local_FunctionStatus;
 800119a:	79fb      	ldrb	r3, [r7, #7]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	41f00000 	.word	0x41f00000

080011a8 <LCD_SendCmnd>:
 *
 * @param[in] Copy_Cmnd The command to be sent to the LCD.
 * @retval Std_ReturnType returns E_OK if the command sending is successful, E_NOK if an error occurs during the process.
 */
Std_ReturnType LCD_SendCmnd(u8 Copy_Cmnd)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
    // Variable to track the function status, initially set to E_NOT_OK
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73fb      	strb	r3, [r7, #15]
        // Update function status to indicate successful command transmission
        Local_FunctionStatus = E_OK;

    #elif LCD_MODE == LCD_MODE_4_BIT
        // Set RS pin to low for command transmission
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_LOW);
 80011b6:	2200      	movs	r2, #0
 80011b8:	210b      	movs	r1, #11
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff ff10 	bl	8000fe0 <MCAL_GPIO_SetPinValue>

        // Set data pins with higher nibble of the command
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_Cmnd, 7));
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	09db      	lsrs	r3, r3, #7
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	2109      	movs	r1, #9
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff ff08 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_Cmnd, 6));
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	119b      	asrs	r3, r3, #6
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	2108      	movs	r1, #8
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fefd 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_Cmnd, 5));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	115b      	asrs	r3, r3, #5
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	2107      	movs	r1, #7
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff fef2 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_Cmnd, 4));
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	111b      	asrs	r3, r3, #4
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	2106      	movs	r1, #6
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fee7 	bl	8000fe0 <MCAL_GPIO_SetPinValue>

        // Pulse the E pin to send higher nibble of the command
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_HIGH);
 8001212:	2201      	movs	r2, #1
 8001214:	210c      	movs	r1, #12
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fee2 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_SYSTICK_DelayMS(2); // Delay for LCD processing
 800121c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001220:	f000 fad8 	bl	80017d4 <MCAL_SYSTICK_DelayMS>
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_LOW);
 8001224:	2200      	movs	r2, #0
 8001226:	210c      	movs	r1, #12
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff fed9 	bl	8000fe0 <MCAL_GPIO_SetPinValue>

        // Set data pins with lower nibble of the command
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_Cmnd, 3));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	10db      	asrs	r3, r3, #3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	2109      	movs	r1, #9
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff fece 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_Cmnd, 2));
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	109b      	asrs	r3, r3, #2
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	2108      	movs	r1, #8
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff fec3 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_Cmnd, 1));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	105b      	asrs	r3, r3, #1
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	461a      	mov	r2, r3
 8001268:	2107      	movs	r1, #7
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff feb8 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_Cmnd, 0));
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	2106      	movs	r1, #6
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff feaf 	bl	8000fe0 <MCAL_GPIO_SetPinValue>

        // Pulse the E pin to send lower nibble of the command
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_HIGH);
 8001282:	2201      	movs	r2, #1
 8001284:	210c      	movs	r1, #12
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff feaa 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_SYSTICK_DelayMS(2); // Delay for LCD processing
 800128c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001290:	f000 faa0 	bl	80017d4 <MCAL_SYSTICK_DelayMS>
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_LOW);
 8001294:	2200      	movs	r2, #0
 8001296:	210c      	movs	r1, #12
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fea1 	bl	8000fe0 <MCAL_GPIO_SetPinValue>

        // Update function status to indicate successful command transmission
        Local_FunctionStatus = E_OK;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
        Local_FunctionStatus = E_NOT_OK;

    #endif

    // Return the function status indicating the success or failure of the command transmission
    return Local_FunctionStatus;
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <LCD_SendChar>:
 *
 * @param[in] Copy_Data The character data to be sent to the LCD for display.
 * @retval Std_ReturnType returns E_OK if the character sending is successful, E_NOK if an error occurs during the process.
 */
Std_ReturnType LCD_SendChar(u8 Copy_Data)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
    // Variable to track the function status, initially set to E_NOT_OK
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73fb      	strb	r3, [r7, #15]
        // Update function status to indicate successful character transmission
        Local_FunctionStatus = E_OK;

    #elif LCD_MODE == LCD_MODE_4_BIT
        // Set RS pin high for character transmission
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_HIGH);
 80012ba:	2201      	movs	r2, #1
 80012bc:	210b      	movs	r1, #11
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff fe8e 	bl	8000fe0 <MCAL_GPIO_SetPinValue>

        // Set data pins with higher nibble of the character
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_Data, 7));
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	09db      	lsrs	r3, r3, #7
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	2109      	movs	r1, #9
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fe86 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_Data, 6));
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	119b      	asrs	r3, r3, #6
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	2108      	movs	r1, #8
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fe7b 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_Data, 5));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	115b      	asrs	r3, r3, #5
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	2107      	movs	r1, #7
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fe70 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_Data, 4));
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	111b      	asrs	r3, r3, #4
 8001304:	b2db      	uxtb	r3, r3
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
 800130c:	461a      	mov	r2, r3
 800130e:	2106      	movs	r1, #6
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fe65 	bl	8000fe0 <MCAL_GPIO_SetPinValue>

        // Pulse the E pin to send higher nibble of the character
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_HIGH);
 8001316:	2201      	movs	r2, #1
 8001318:	210c      	movs	r1, #12
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fe60 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_SYSTICK_DelayMS(2); // Delay for LCD processing
 8001320:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001324:	f000 fa56 	bl	80017d4 <MCAL_SYSTICK_DelayMS>
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_LOW);
 8001328:	2200      	movs	r2, #0
 800132a:	210c      	movs	r1, #12
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fe57 	bl	8000fe0 <MCAL_GPIO_SetPinValue>

        // Set data pins with lower nibble of the character
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_Data, 3));
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	10db      	asrs	r3, r3, #3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	2109      	movs	r1, #9
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff fe4c 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_Data, 2));
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	109b      	asrs	r3, r3, #2
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	2108      	movs	r1, #8
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff fe41 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_Data, 1));
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	105b      	asrs	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	2107      	movs	r1, #7
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff fe36 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_Data, 0));
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	2106      	movs	r1, #6
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fe2d 	bl	8000fe0 <MCAL_GPIO_SetPinValue>

        // Pulse the E pin to send lower nibble of the character
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_HIGH);
 8001386:	2201      	movs	r2, #1
 8001388:	210c      	movs	r1, #12
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff fe28 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_SYSTICK_DelayMS(2); // Delay for LCD processing
 8001390:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001394:	f000 fa1e 	bl	80017d4 <MCAL_SYSTICK_DelayMS>
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_LOW);
 8001398:	2200      	movs	r2, #0
 800139a:	210c      	movs	r1, #12
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff fe1f 	bl	8000fe0 <MCAL_GPIO_SetPinValue>

        // Update function status to indicate successful character transmission
        Local_FunctionStatus = E_OK;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
        Local_FunctionStatus = E_NOT_OK;

    #endif

    // Return the function status indicating the success or failure of the character transmission
    return Local_FunctionStatus;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <LCD_SendString>:
 *
 * @param[in] Copy_String Pointer to the string of characters to be displayed on the LCD.
 * @retval Std_ReturnType returns E_OK if the string sending is successful, E_NOK if an error occurs during the process.
 */ 
Std_ReturnType LCD_SendString (u8* Copy_String)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
    // Variable to track the function status, initially set to E_NOT_OK
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73bb      	strb	r3, [r7, #14]
    // Loop through each character in the string until the null terminator is encountered
    for ( u8 Local_i = 0; Copy_String[Local_i] != '\0'; Local_i++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e009      	b.n	80013d6 <LCD_SendString+0x26>
        // Send each character of the string to be displayed on the LCD
        LCD_SendChar(Copy_String[Local_i]);
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff6e 	bl	80012ac <LCD_SendChar>
    for ( u8 Local_i = 0; Copy_String[Local_i] != '\0'; Local_i++) {
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	3301      	adds	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ef      	bne.n	80013c2 <LCD_SendString+0x12>
    }
    // All characters sent successfully, update function status to indicate success
    Local_FunctionStatus = E_OK;
 80013e2:	2301      	movs	r3, #1
 80013e4:	73bb      	strb	r3, [r7, #14]

    // Return the function status indicating the success or failure of string transmission
    return Local_FunctionStatus;
 80013e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <LCD_SendIntger>:
 *
 * @param[in] Copy_Data The integer value to be displayed on the LCD.
 * @retval Std_ReturnType returns E_OK if the integer sending is successful, E_NOK if an error occurs during the process.
 */
Std_ReturnType LCD_SendIntger(s32 Copy_Data)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08e      	sub	sp, #56	; 0x38
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
    // Variable to track the function status, initially set to E_NOT_OK
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    u32 Local_str[10]; // Array to hold the string representation of the integer

    itoa(Copy_Data, Local_str, 10); // Convert the integer to a string (base 10)
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	220a      	movs	r2, #10
 8001404:	4619      	mov	r1, r3
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fdc2 	bl	8001f90 <itoa>

    // Send the string representation of the integer to be displayed on the LCD
    LCD_SendString((u8*)Local_str); // Assuming LCD_SendString function expects a u8* type
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ffcd 	bl	80013b0 <LCD_SendString>

    // Update function status to indicate successful transmission of the integer
    Local_FunctionStatus = E_OK;
 8001416:	2301      	movs	r3, #1
 8001418:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    // Return the function status indicating the success or failure of integer transmission
    return Local_FunctionStatus;
 800141c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001420:	4618      	mov	r0, r3
 8001422:	3738      	adds	r7, #56	; 0x38
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <MCAL_NVIC_EnableIRQ>:
#include "NVIC_interface.h"
#include "NVIC_private.h"
#include "NVIC_config.h"
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType MCAL_NVIC_EnableIRQ(IRQn_Type Copy_IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
    if( Copy_IRQn >= NVIC_WWDG_IRQn && Copy_IRQn <= NVIC_I2C1_EV_IRQn)
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b1f      	cmp	r3, #31
 800143a:	d807      	bhi.n	800144c <MCAL_NVIC_EnableIRQ+0x24>
    {
        NVIC_ISER0 = (1 << Copy_IRQn);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2201      	movs	r2, #1
 8001440:	409a      	lsls	r2, r3
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <MCAL_NVIC_EnableIRQ+0x70>)
 8001444:	601a      	str	r2, [r3, #0]
        Local_FunctionStatus=E_OK;
 8001446:	2301      	movs	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e01f      	b.n	800148c <MCAL_NVIC_EnableIRQ+0x64>
    }
    else if ( Copy_IRQn >= NVIC_I2C1_ER_IRQn && Copy_IRQn <= 63)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b1f      	cmp	r3, #31
 8001450:	d90b      	bls.n	800146a <MCAL_NVIC_EnableIRQ+0x42>
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b3f      	cmp	r3, #63	; 0x3f
 8001456:	d808      	bhi.n	800146a <MCAL_NVIC_EnableIRQ+0x42>
    {
        NVIC_ISER1 = (1 << (Copy_IRQn-32));
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	3b20      	subs	r3, #32
 800145c:	2201      	movs	r2, #1
 800145e:	409a      	lsls	r2, r3
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MCAL_NVIC_EnableIRQ+0x74>)
 8001462:	601a      	str	r2, [r3, #0]
        Local_FunctionStatus=E_OK;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e010      	b.n	800148c <MCAL_NVIC_EnableIRQ+0x64>

    }
    else if(Copy_IRQn >= 64 && Copy_IRQn <= 67)
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b3f      	cmp	r3, #63	; 0x3f
 800146e:	d90b      	bls.n	8001488 <MCAL_NVIC_EnableIRQ+0x60>
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b43      	cmp	r3, #67	; 0x43
 8001474:	d808      	bhi.n	8001488 <MCAL_NVIC_EnableIRQ+0x60>
    {
        NVIC_ISER2 = (1 << (Copy_IRQn-64));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	3b40      	subs	r3, #64	; 0x40
 800147a:	2201      	movs	r2, #1
 800147c:	409a      	lsls	r2, r3
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MCAL_NVIC_EnableIRQ+0x78>)
 8001480:	601a      	str	r2, [r3, #0]
        Local_FunctionStatus=E_OK;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	e001      	b.n	800148c <MCAL_NVIC_EnableIRQ+0x64>
    }else
    {
        Local_FunctionStatus = E_NOT_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
    }
    return Local_FunctionStatus;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000e104 	.word	0xe000e104
 80014a0:	e000e108 	.word	0xe000e108

080014a4 <MCAL_RCC_InitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"
#include "RCC_interface.h"
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType MCAL_RCC_InitSysClock(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
    Std_ReturnType local_functionStates = E_NOT_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	71fb      	strb	r3, [r7, #7]
    #if RCC_SYSCLK == RCC_HSI
        /* Enable HSI */
        SET_BIT( RCC_CR , RCC_CR_HSION);
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <MCAL_RCC_InitSysClock+0x4c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <MCAL_RCC_InitSysClock+0x4c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6013      	str	r3, [r2, #0]
        /* Wait until the clock is stable */
        while( !GET_BIT( RCC_CR , RCC_CR_HSIRDY ) );
 80014ba:	bf00      	nop
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MCAL_RCC_InitSysClock+0x4c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f9      	beq.n	80014bc <MCAL_RCC_InitSysClock+0x18>
        /* Select the HSI As system CLOCK */
        CLR_BIT( RCC_CFGR , 0 );
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MCAL_RCC_InitSysClock+0x50>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <MCAL_RCC_InitSysClock+0x50>)
 80014ce:	f023 0301 	bic.w	r3, r3, #1
 80014d2:	6013      	str	r3, [r2, #0]
        CLR_BIT( RCC_CFGR , 1 );
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MCAL_RCC_InitSysClock+0x50>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <MCAL_RCC_InitSysClock+0x50>)
 80014da:	f023 0302 	bic.w	r3, r3, #2
 80014de:	6013      	str	r3, [r2, #0]
        local_functionStates = E_OK;
 80014e0:	2301      	movs	r3, #1
 80014e2:	71fb      	strb	r3, [r7, #7]
            #error "Wrong Choice !!"
        #endif /* RCC_PLL_SRC */
    #else 
        #error "Wrong Choice !!"
    #endif /* RCC_SYSCLK */
    return local_functionStates;
 80014e4:	79fb      	ldrb	r3, [r7, #7]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40021004 	.word	0x40021004

080014f8 <MCAL_Rcc_EnablePrephiral>:
/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_Rcc_EnablePrephiral(u8 Copy_PeripheralId , u8 Copy_BusId)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	460a      	mov	r2, r1
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	4613      	mov	r3, r2
 8001506:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]
    switch (Copy_BusId)
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d020      	beq.n	8001554 <MCAL_Rcc_EnablePrephiral+0x5c>
 8001512:	2b02      	cmp	r3, #2
 8001514:	dc2b      	bgt.n	800156e <MCAL_Rcc_EnablePrephiral+0x76>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d002      	beq.n	8001520 <MCAL_Rcc_EnablePrephiral+0x28>
 800151a:	2b01      	cmp	r3, #1
 800151c:	d00d      	beq.n	800153a <MCAL_Rcc_EnablePrephiral+0x42>
 800151e:	e026      	b.n	800156e <MCAL_Rcc_EnablePrephiral+0x76>
    {
    case RCC_AHB:
    SET_BIT( RCC_AHBENR , Copy_PeripheralId );
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MCAL_Rcc_EnablePrephiral+0x88>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	2101      	movs	r1, #1
 8001528:	fa01 f202 	lsl.w	r2, r1, r2
 800152c:	4611      	mov	r1, r2
 800152e:	4a14      	ldr	r2, [pc, #80]	; (8001580 <MCAL_Rcc_EnablePrephiral+0x88>)
 8001530:	430b      	orrs	r3, r1
 8001532:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8001534:	2301      	movs	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
    break;
 8001538:	e01c      	b.n	8001574 <MCAL_Rcc_EnablePrephiral+0x7c>
    case RCC_APB1:
    SET_BIT ( RCC_AHBENR , Copy_PeripheralId );
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MCAL_Rcc_EnablePrephiral+0x88>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	79fa      	ldrb	r2, [r7, #7]
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f202 	lsl.w	r2, r1, r2
 8001546:	4611      	mov	r1, r2
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <MCAL_Rcc_EnablePrephiral+0x88>)
 800154a:	430b      	orrs	r3, r1
 800154c:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
    break;
 8001552:	e00f      	b.n	8001574 <MCAL_Rcc_EnablePrephiral+0x7c>
    case RCC_APB2:
    SET_BIT ( RCC_APB2ENR , Copy_PeripheralId );
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MCAL_Rcc_EnablePrephiral+0x8c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	79fa      	ldrb	r2, [r7, #7]
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	4611      	mov	r1, r2
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <MCAL_Rcc_EnablePrephiral+0x8c>)
 8001564:	430b      	orrs	r3, r1
 8001566:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
    break;
 800156c:	e002      	b.n	8001574 <MCAL_Rcc_EnablePrephiral+0x7c>
    default:
    local_functionStates =E_NOT_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
    break;
 8001572:	bf00      	nop
    }
    return local_functionStates;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	40021014 	.word	0x40021014
 8001584:	40021018 	.word	0x40021018

08001588 <MCAL_SYSTICK_vINIT>:
    SYSTICK->LOAD = Copy_Ticks;
    Local_FunctionStatus= E_OK;
    return Local_FunctionStatus;
}
Std_ReturnType MCAL_SYSTICK_vINIT()
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	71fb      	strb	r3, [r7, #7]
    /**< Disable SysTick timer */
    SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8001592:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <MCAL_SYSTICK_vINIT+0x40>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <MCAL_SYSTICK_vINIT+0x40>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6013      	str	r3, [r2, #0]
    /**< Configure SysTick timer to use the processor clock */
    #if SYSTICK_AHB_CLKSRC == SYSTICK_CLKSRC_DIV_1
        SYSTICK->CTRL |= SYSTICK_CTRL_CLKSRC_MASK; /**< Set bit 2 to use the processor clock */
    #elif SYSTICK_AHB_CLKSRC == SYSTICK_CLKSRC_DIV_8
        SYSTICK->CTRL &= ~SYSTICK_CTRL_CLKSRC_MASK;  /**< Clear bit 2 to use the processor clock/8 */
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <MCAL_SYSTICK_vINIT+0x40>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a09      	ldr	r2, [pc, #36]	; (80015c8 <MCAL_SYSTICK_vINIT+0x40>)
 80015a4:	f023 0304 	bic.w	r3, r3, #4
 80015a8:	6013      	str	r3, [r2, #0]
    #else
        #error "Invalid STK_CTRL_CLKSOURCE value. Please choose STK_CTRL_CLKSOURCE_1 or STK_CTRL_CLKSOURCE_8."
    #endif
    /**< Generate interrupt when it reaches zero */
    #if SYSTICK_TICKINT == SYSTICK_TICKINT_ENABLED
        SYSTICK->CTRL |= SYSTICK_CTRL_TICKINT_MASK; /**< Set bit 1 to enable interrupt when the counter reaches zero */
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <MCAL_SYSTICK_vINIT+0x40>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <MCAL_SYSTICK_vINIT+0x40>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6013      	str	r3, [r2, #0]
    #elif SYSTICK_TICKINT == SYSTICK_TICKINT_DISABLED
        SYSTICK->CTRL &= ~SYSTICK_CTRL_TICKINT_MASK; /**< Clear bit 1 to disable interrupt when the counter reaches zero */
    #else
        #error "Invalid STK_CTRL_TICKINT value. Please choose STK_CTRL_TICKINT_ENABLE or STK_CTRL_TICKINT_DISABLE."
    #endif
    Local_FunctionStatus= E_OK;
 80015b6:	2301      	movs	r3, #1
 80015b8:	71fb      	strb	r3, [r7, #7]
    return Local_FunctionStatus;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <MCAL_SYSTICK_Start>:

    return Local_FunctionStatus;
}

Std_ReturnType MCAL_SYSTICK_Start()
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	71fb      	strb	r3, [r7, #7]
    /**< Enable SysTick timer */
    SYSTICK->CTRL |= SYSTICK_CTRL_ENABLE_MASK;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <MCAL_SYSTICK_Start+0x28>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <MCAL_SYSTICK_Start+0x28>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6013      	str	r3, [r2, #0]
    Local_FunctionStatus=E_OK;
 80015e2:	2301      	movs	r3, #1
 80015e4:	71fb      	strb	r3, [r7, #7]
    return Local_FunctionStatus;
 80015e6:	79fb      	ldrb	r3, [r7, #7]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010

080015f8 <MCAL_SYSTICK_Stop>:

Std_ReturnType MCAL_SYSTICK_Stop()
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	71fb      	strb	r3, [r7, #7]
    /**< Disable SysTick timer */
    SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <MCAL_SYSTICK_Stop+0x28>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a06      	ldr	r2, [pc, #24]	; (8001620 <MCAL_SYSTICK_Stop+0x28>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	6013      	str	r3, [r2, #0]
    Local_FunctionStatus=E_OK;
 800160e:	2301      	movs	r3, #1
 8001610:	71fb      	strb	r3, [r7, #7]
    return Local_FunctionStatus;
 8001612:	79fb      	ldrb	r3, [r7, #7]
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <MCAL_SYSTICK_Reset>:

Std_ReturnType MCAL_SYSTICK_Reset()
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	71fb      	strb	r3, [r7, #7]
    /**< Disable SysTick timer */
    SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <MCAL_SYSTICK_Reset+0x40>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <MCAL_SYSTICK_Reset+0x40>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	6013      	str	r3, [r2, #0]
    /**< Set the reload value to 0 */
    SYSTICK->LOAD=0;
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MCAL_SYSTICK_Reset+0x40>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
    /**< Clear the current value */
    SYSTICK->VAL=0;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <MCAL_SYSTICK_Reset+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
    /**< Clear the count flag */
    SYSTICK->CTRL &= ~SYSTICK_CTRL_COUNTFLAG_MASK;
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <MCAL_SYSTICK_Reset+0x40>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a06      	ldr	r2, [pc, #24]	; (8001664 <MCAL_SYSTICK_Reset+0x40>)
 800164c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
    Local_FunctionStatus=E_OK;
 8001652:	2301      	movs	r3, #1
 8001654:	71fb      	strb	r3, [r7, #7]
    return Local_FunctionStatus;
 8001656:	79fb      	ldrb	r3, [r7, #7]
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <MCAL_SYSTICK_GetElapsedCounts>:
    Local_FunctionStatus=E_OK;
    return Local_FunctionStatus;
}

Std_ReturnType MCAL_SYSTICK_GetElapsedCounts(u32* Elapsed_Counts)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]
//     else
//     {
//         /**< Calculate elapsed ticks without timer overflow */
//         *Elapsed_Counts = (u32)SYSTICK->LOAD - (Local_CurrentValue - Local_PreviousValue);
//    }
    *Elapsed_Counts=(SYSTICK->LOAD - SYSTICK->VAL);
 8001674:	4b07      	ldr	r3, [pc, #28]	; (8001694 <MCAL_SYSTICK_GetElapsedCounts+0x2c>)
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MCAL_SYSTICK_GetElapsedCounts+0x2c>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	1ad2      	subs	r2, r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]
    /**< Update the previous value for the next call */
   // Local_PreviousValue=Local_CurrentValue;
    Local_FunctionStatus=E_OK;
 8001682:	2301      	movs	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
    return Local_FunctionStatus;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <MCAL_SYSTICK_DelayUS>:

Std_ReturnType MCAL_SYSTICK_DelayUS(f32 Copy_MicroSeconds)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]
    /**< Calculate the number of ticks required for the given microseconds */ 
    u32 Local_TickRequired = (u32)(Copy_MicroSeconds * (STK_AHB_CLK / 1000000.0));
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff f8a5 	bl	80007f4 <__aeabi_f2d>
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	4b46      	ldr	r3, [pc, #280]	; (80017c8 <MCAL_SYSTICK_DelayUS+0x130>)
 80016b0:	f7fe fd5e 	bl	8000170 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff f8f2 	bl	80008a4 <__aeabi_d2uiz>
 80016c0:	4603      	mov	r3, r0
 80016c2:	617b      	str	r3, [r7, #20]
    if (SYSTICK_AHB_CLKSRC == SYSTICK_CLKSRC_DIV_8)
    {
 	    Local_TickRequired/=8;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	617b      	str	r3, [r7, #20]
    }
    /**< Check if the ticks required is within the valid range */ 
    if (Local_TickRequired <= SYSTICK_RELOAD_MAX)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d0:	d21c      	bcs.n	800170c <MCAL_SYSTICK_DelayUS+0x74>
   {
        /**< Set the reload value of the SysTick timer */ 
        SYSTICK->LOAD = Local_TickRequired;
 80016d2:	4a3e      	ldr	r2, [pc, #248]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	6053      	str	r3, [r2, #4]
        /**< Enable the SysTick timer */ 
        CLR_BIT(SYSTICK->CTRL,1);
 80016d8:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a3b      	ldr	r2, [pc, #236]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 80016de:	f023 0302 	bic.w	r3, r3, #2
 80016e2:	6013      	str	r3, [r2, #0]
        MCAL_SYSTICK_Start();
 80016e4:	f7ff ff72 	bl	80015cc <MCAL_SYSTICK_Start>
        /**< Wait until the COUNTFLAG bit is set (indicates timer has counted down to zero) */ 
        while(GET_BIT(SYSTICK->CTRL,16)==0);
 80016e8:	bf00      	nop
 80016ea:	4b38      	ldr	r3, [pc, #224]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f9      	beq.n	80016ea <MCAL_SYSTICK_DelayUS+0x52>
        /**< Disable the SysTick timer */ 
        CLR_BIT(SYSTICK->CTRL,0);
 80016f6:	4b35      	ldr	r3, [pc, #212]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a34      	ldr	r2, [pc, #208]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6013      	str	r3, [r2, #0]
        /**< Reset the timer value */ 
        MCAL_SYSTICK_Reset();
 8001702:	f7ff ff8f 	bl	8001624 <MCAL_SYSTICK_Reset>
        Local_FunctionStatus= E_OK;
 8001706:	2301      	movs	r3, #1
 8001708:	77fb      	strb	r3, [r7, #31]
 800170a:	e058      	b.n	80017be <MCAL_SYSTICK_DelayUS+0x126>
    }else if(Local_TickRequired > SYSTICK_RELOAD_MAX)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001712:	d352      	bcc.n	80017ba <MCAL_SYSTICK_DelayUS+0x122>
    {

        /**< Calculate the number of Overflows */
        u32 Local_OverFlowCount = Local_TickRequired / SYSTICK_RELOAD_MAX;
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	f240 1301 	movw	r3, #257	; 0x101
 800171a:	fba3 1302 	umull	r1, r3, r3, r2
 800171e:	1ad2      	subs	r2, r2, r3
 8001720:	0852      	lsrs	r2, r2, #1
 8001722:	4413      	add	r3, r2
 8001724:	0ddb      	lsrs	r3, r3, #23
 8001726:	613b      	str	r3, [r7, #16]
        /**< Check the first timer value to get the exact delay */
        u32 Local_InitialValue = Local_TickRequired % SYSTICK_RELOAD_MAX;
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	f240 1301 	movw	r3, #257	; 0x101
 800172e:	fba3 1302 	umull	r1, r3, r3, r2
 8001732:	1ad1      	subs	r1, r2, r3
 8001734:	0849      	lsrs	r1, r1, #1
 8001736:	440b      	add	r3, r1
 8001738:	0dd9      	lsrs	r1, r3, #23
 800173a:	460b      	mov	r3, r1
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	1a5b      	subs	r3, r3, r1
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	60fb      	str	r3, [r7, #12]
        /**< Set the reload value of the SysTick timer */
        SYSTICK->LOAD = Local_InitialValue;
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6053      	str	r3, [r2, #4]
        /**< Enable the SysTick timer */
        SYSTICK->CTRL |= SYSTICK_CTRL_ENABLE_MASK;
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6013      	str	r3, [r2, #0]
        /**< Wait until the COUNTFLAG bit is set (indicates timer has counted down to zero) */
        while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG_MASK));
 8001756:	bf00      	nop
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f9      	beq.n	8001758 <MCAL_SYSTICK_DelayUS+0xc0>
        /**< Disable the SysTick timer */
        SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a18      	ldr	r2, [pc, #96]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6013      	str	r3, [r2, #0]
        /**< Set the reload value of the SysTick timer for the rest of the  */
        SYSTICK->LOAD = SYSTICK_RELOAD_MAX-1;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <MCAL_SYSTICK_DelayUS+0x138>)
 8001774:	605a      	str	r2, [r3, #4]
        /**< Enable the SysTick timer */
        SYSTICK->CTRL |= SYSTICK_CTRL_ENABLE_MASK;
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a14      	ldr	r2, [pc, #80]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6013      	str	r3, [r2, #0]
        /**< Loop untill there's no more OVF */
        for(u32 Local_Counter=0 ; Local_Counter<=Local_OverFlowCount ; Local_Counter++)
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	e009      	b.n	800179c <MCAL_SYSTICK_DelayUS+0x104>
        {
            /**< Wait until the COUNTFLAG bit is set (indicates timer has counted down to zero) */
            while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG_MASK));
 8001788:	bf00      	nop
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f9      	beq.n	800178a <MCAL_SYSTICK_DelayUS+0xf2>
        for(u32 Local_Counter=0 ; Local_Counter<=Local_OverFlowCount ; Local_Counter++)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	3301      	adds	r3, #1
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d9f1      	bls.n	8001788 <MCAL_SYSTICK_DelayUS+0xf0>
        }
        /**< Disable the SysTick timer */
        SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <MCAL_SYSTICK_DelayUS+0x134>)
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	6013      	str	r3, [r2, #0]
        /**< Reset the SysTick timer */
        MCAL_SYSTICK_Reset();
 80017b0:	f7ff ff38 	bl	8001624 <MCAL_SYSTICK_Reset>
        Local_FunctionStatus= E_OK;
 80017b4:	2301      	movs	r3, #1
 80017b6:	77fb      	strb	r3, [r7, #31]
 80017b8:	e001      	b.n	80017be <MCAL_SYSTICK_DelayUS+0x126>
    }
    else
    {
        return Local_FunctionStatus;
 80017ba:	7ffb      	ldrb	r3, [r7, #31]
 80017bc:	e000      	b.n	80017c0 <MCAL_SYSTICK_DelayUS+0x128>
    }
    return Local_FunctionStatus;
 80017be:	7ffb      	ldrb	r3, [r7, #31]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40200000 	.word	0x40200000
 80017cc:	e000e010 	.word	0xe000e010
 80017d0:	00fffffe 	.word	0x00fffffe

080017d4 <MCAL_SYSTICK_DelayMS>:

Std_ReturnType MCAL_SYSTICK_DelayMS(f32 Copy_MilliSeconds)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	77fb      	strb	r3, [r7, #31]
    /**< Calculate the number of ticks required for the given microseconds */ 
    u32 Local_TickRequired = (u32)(Copy_MilliSeconds * (STK_AHB_CLK / 1000.0));
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff f807 	bl	80007f4 <__aeabi_f2d>
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	4b45      	ldr	r3, [pc, #276]	; (8001900 <MCAL_SYSTICK_DelayMS+0x12c>)
 80017ec:	f7fe fcc0 	bl	8000170 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7ff f854 	bl	80008a4 <__aeabi_d2uiz>
 80017fc:	4603      	mov	r3, r0
 80017fe:	617b      	str	r3, [r7, #20]
    if (SYSTICK_AHB_CLKSRC == SYSTICK_CLKSRC_DIV_8)
    {
 	    Local_TickRequired/=8;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	08db      	lsrs	r3, r3, #3
 8001804:	617b      	str	r3, [r7, #20]
    }
    /**< Check if the ticks required is within the valid range */ 
    if (Local_TickRequired <= SYSTICK_RELOAD_MAX)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d21a      	bcs.n	8001844 <MCAL_SYSTICK_DelayMS+0x70>
    {
        /**< Set the reload value of the SysTick timer */ 
        SYSTICK->LOAD = Local_TickRequired;
 800180e:	4a3d      	ldr	r2, [pc, #244]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	6053      	str	r3, [r2, #4]
        /**< Enable the SysTick timer */ 
        SYSTICK->CTRL |= SYSTICK_CTRL_ENABLE_MASK;
 8001814:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a3a      	ldr	r2, [pc, #232]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6013      	str	r3, [r2, #0]
        /**< Wait until the COUNTFLAG bit is set (indicates timer has counted down to zero) */ 
        while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG_MASK));
 8001820:	bf00      	nop
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f9      	beq.n	8001822 <MCAL_SYSTICK_DelayMS+0x4e>
        /**< Disable the SysTick timer */ 
        SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a34      	ldr	r2, [pc, #208]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6013      	str	r3, [r2, #0]
        /**< Reset the timer value */ 
        MCAL_SYSTICK_Reset();
 800183a:	f7ff fef3 	bl	8001624 <MCAL_SYSTICK_Reset>
        Local_FunctionStatus= E_OK;
 800183e:	2301      	movs	r3, #1
 8001840:	77fb      	strb	r3, [r7, #31]
 8001842:	e058      	b.n	80018f6 <MCAL_SYSTICK_DelayMS+0x122>
    }else if(Local_TickRequired > SYSTICK_RELOAD_MAX)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800184a:	d352      	bcc.n	80018f2 <MCAL_SYSTICK_DelayMS+0x11e>
    {
        /**< Calculate the number of Overflows */ 
        u32 Local_OverFlowCount = Local_TickRequired / SYSTICK_RELOAD_MAX;
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	f240 1301 	movw	r3, #257	; 0x101
 8001852:	fba3 1302 	umull	r1, r3, r3, r2
 8001856:	1ad2      	subs	r2, r2, r3
 8001858:	0852      	lsrs	r2, r2, #1
 800185a:	4413      	add	r3, r2
 800185c:	0ddb      	lsrs	r3, r3, #23
 800185e:	613b      	str	r3, [r7, #16]
        /**< Check the first timer value to get the exact delay */  
        u32 Local_InitialValue = Local_TickRequired % SYSTICK_RELOAD_MAX;
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	f240 1301 	movw	r3, #257	; 0x101
 8001866:	fba3 1302 	umull	r1, r3, r3, r2
 800186a:	1ad1      	subs	r1, r2, r3
 800186c:	0849      	lsrs	r1, r1, #1
 800186e:	440b      	add	r3, r1
 8001870:	0dd9      	lsrs	r1, r3, #23
 8001872:	460b      	mov	r3, r1
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	1a5b      	subs	r3, r3, r1
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	60fb      	str	r3, [r7, #12]
        /**< Set the reload value of the SysTick timer */ 
        SYSTICK->LOAD = Local_InitialValue;
 800187c:	4a21      	ldr	r2, [pc, #132]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6053      	str	r3, [r2, #4]
        /**< Enable the SysTick timer */ 
        SYSTICK->CTRL |= SYSTICK_CTRL_ENABLE_MASK;
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a1f      	ldr	r2, [pc, #124]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6013      	str	r3, [r2, #0]
        /**< Wait until the COUNTFLAG bit is set (indicates timer has counted down to zero) */ 
        while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG_MASK));
 800188e:	bf00      	nop
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f9      	beq.n	8001890 <MCAL_SYSTICK_DelayMS+0xbc>
        /**< Disable the SysTick timer */ 
        SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a18      	ldr	r2, [pc, #96]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]
        /**< Set the reload value of the SysTick timer for the rest of the  */ 
        SYSTICK->LOAD = SYSTICK_RELOAD_MAX-1;
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 80018aa:	4a17      	ldr	r2, [pc, #92]	; (8001908 <MCAL_SYSTICK_DelayMS+0x134>)
 80018ac:	605a      	str	r2, [r3, #4]
        /**< Enable the SysTick timer */ 
        SYSTICK->CTRL |= SYSTICK_CTRL_ENABLE_MASK;
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a14      	ldr	r2, [pc, #80]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6013      	str	r3, [r2, #0]
        /**< Loop untill there's no more OVF */ 
        for(u32 Local_Counter=0 ; Local_Counter<=Local_OverFlowCount ; Local_Counter++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	e009      	b.n	80018d4 <MCAL_SYSTICK_DelayMS+0x100>
        {
            /**< Wait until the COUNTFLAG bit is set (indicates timer has counted down to zero) */ 
            while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG_MASK));
 80018c0:	bf00      	nop
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f9      	beq.n	80018c2 <MCAL_SYSTICK_DelayMS+0xee>
        for(u32 Local_Counter=0 ; Local_Counter<=Local_OverFlowCount ; Local_Counter++)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	3301      	adds	r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d9f1      	bls.n	80018c0 <MCAL_SYSTICK_DelayMS+0xec>
        }
        /**< Disable the SysTick timer */ 
        SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a08      	ldr	r2, [pc, #32]	; (8001904 <MCAL_SYSTICK_DelayMS+0x130>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	6013      	str	r3, [r2, #0]
        /**< Reset the SysTick timer */ 
        MCAL_SYSTICK_Reset();
 80018e8:	f7ff fe9c 	bl	8001624 <MCAL_SYSTICK_Reset>
        Local_FunctionStatus= E_OK;
 80018ec:	2301      	movs	r3, #1
 80018ee:	77fb      	strb	r3, [r7, #31]
 80018f0:	e001      	b.n	80018f6 <MCAL_SYSTICK_DelayMS+0x122>
    }
    else
    {
        return Local_FunctionStatus;
 80018f2:	7ffb      	ldrb	r3, [r7, #31]
 80018f4:	e000      	b.n	80018f8 <MCAL_SYSTICK_DelayMS+0x124>
    }
    return Local_FunctionStatus;
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40bf4000 	.word	0x40bf4000
 8001904:	e000e010 	.word	0xe000e010
 8001908:	00fffffe 	.word	0x00fffffe

0800190c <MCAL_SYSTICK_SetIntervalSingle>:

Std_ReturnType MCAL_SYSTICK_SetIntervalSingle(f32 Copy_MicroSeconds , SYSTICK_CallbackFunc_t Callback_Func )
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	73fb      	strb	r3, [r7, #15]
    if(Callback_Func != NULL)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01b      	beq.n	8001958 <MCAL_SYSTICK_SetIntervalSingle+0x4c>
    {
        /**< Save the callback function pointer */
        SYSTICK_Callback = Callback_Func;
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <MCAL_SYSTICK_SetIntervalSingle+0x5c>)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	6013      	str	r3, [r2, #0]
        /* Calculate the number of ticks required to wait for the specified number of microseconds */
        u32 Local_TickRequired = (u32)(Copy_MicroSeconds * (STK_AHB_CLK / 1000000));
 8001926:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7fe fd4a 	bl	80003c4 <__aeabi_fmul>
 8001930:	4603      	mov	r3, r0
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f90a 	bl	8000b4c <__aeabi_f2uiz>
 8001938:	4603      	mov	r3, r0
 800193a:	60bb      	str	r3, [r7, #8]
        if (SYSTICK_AHB_CLKSRC == SYSTICK_CLKSRC_DIV_8)
        {
     	    Local_TickRequired/=8;
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	08db      	lsrs	r3, r3, #3
 8001940:	60bb      	str	r3, [r7, #8]
        }
       // Local_TickRequired/=8;
        /* Set the reload value for the SysTick timer */
        SYSTICK->LOAD = Local_TickRequired;
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <MCAL_SYSTICK_SetIntervalSingle+0x60>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	6053      	str	r3, [r2, #4]
        /**< Set the Mode of interval to be single */
        SYSTICK_ModeOfInterval=SYSTICK_SINGLE_INTERVAL;
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MCAL_SYSTICK_SetIntervalSingle+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
        /* Start the SysTick timer and enable the interrupt */
        MCAL_SYSTICK_Start();
 800194e:	f7ff fe3d 	bl	80015cc <MCAL_SYSTICK_Start>
        /**< Configured successfully */
        Local_FunctionStatus= E_OK;
 8001952:	2301      	movs	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e001      	b.n	800195c <MCAL_SYSTICK_SetIntervalSingle+0x50>
    }else
    {
        /**< Invalid callback function pointer */
        Local_FunctionStatus= E_NOT_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
    }
    return Local_FunctionStatus;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000005c 	.word	0x2000005c
 800196c:	e000e010 	.word	0xe000e010
 8001970:	20000060 	.word	0x20000060

08001974 <SysTick_Handler>:
/**
 * @defgroup IRQ_Handlers IRQ Handlers
 * @{
 */
void SysTick_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    if (SYSTICK_Callback != NULL)
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <SysTick_Handler+0x50>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01e      	beq.n	80019be <SysTick_Handler+0x4a>
    {
        if (SYSTICK_ModeOfInterval == SYSTICK_SINGLE_INTERVAL)
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <SysTick_Handler+0x54>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d111      	bne.n	80019ac <SysTick_Handler+0x38>
        {
            /**< Disable interrupt when the counter reaches zero */
            SYSTICK->CTRL &= ~SYSTICK_CTRL_TICKINT_MASK;
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <SysTick_Handler+0x58>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <SysTick_Handler+0x58>)
 800198e:	f023 0302 	bic.w	r3, r3, #2
 8001992:	6013      	str	r3, [r2, #0]
            /**< Disable SysTick timer */
            SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <SysTick_Handler+0x58>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <SysTick_Handler+0x58>)
 800199a:	f023 0301 	bic.w	r3, r3, #1
 800199e:	6013      	str	r3, [r2, #0]
            /**< Clear the current value */
            SYSTICK->LOAD=0;
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <SysTick_Handler+0x58>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	605a      	str	r2, [r3, #4]
            /**< Set the reload value to 0 */
            SYSTICK->VAL=0;
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <SysTick_Handler+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
        }
        /**< Callback notification */
        SYSTICK_Callback();
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <SysTick_Handler+0x50>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4798      	blx	r3
        /**< Clear the count/interrupt flag */
        SYSTICK->CTRL &= ~SYSTICK_CTRL_COUNTFLAG_MASK;
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <SysTick_Handler+0x58>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <SysTick_Handler+0x58>)
 80019b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
    }
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000005c 	.word	0x2000005c
 80019c8:	20000060 	.word	0x20000060
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <Ultrasonic_init>:
static volatile US_t Ultrasonic[NUMBER_OF_ULTRASONIC_USED];
u32 distance;
static volatile u8 echoRisingFlag,readingState;
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType Ultrasonic_init(US_ID_t ID, US_config_t * Ultrasonic_config)
{
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
    Ultrasonic[ID].Echo_pin=Ultrasonic_config->Echo_pin;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	78d1      	ldrb	r1, [r2, #3]
 80019e6:	4aa0      	ldr	r2, [pc, #640]	; (8001c68 <Ultrasonic_init+0x298>)
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4413      	add	r3, r2
 80019ec:	3301      	adds	r3, #1
 80019ee:	460a      	mov	r2, r1
 80019f0:	701a      	strb	r2, [r3, #0]
    Ultrasonic[ID].Echo_port=Ultrasonic_config->Echo_port;
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	7911      	ldrb	r1, [r2, #4]
 80019f8:	4a9b      	ldr	r2, [pc, #620]	; (8001c68 <Ultrasonic_init+0x298>)
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	4413      	add	r3, r2
 80019fe:	3302      	adds	r3, #2
 8001a00:	460a      	mov	r2, r1
 8001a02:	701a      	strb	r2, [r3, #0]
    Ultrasonic[ID].Trig_pin=Ultrasonic_config->Trigger_pin;
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	7951      	ldrb	r1, [r2, #5]
 8001a0a:	4a97      	ldr	r2, [pc, #604]	; (8001c68 <Ultrasonic_init+0x298>)
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	4413      	add	r3, r2
 8001a10:	3303      	adds	r3, #3
 8001a12:	460a      	mov	r2, r1
 8001a14:	701a      	strb	r2, [r3, #0]
    Ultrasonic[ID].Trig_port=Ultrasonic_config->Trigger_port;
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	7991      	ldrb	r1, [r2, #6]
 8001a1c:	4a92      	ldr	r2, [pc, #584]	; (8001c68 <Ultrasonic_init+0x298>)
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	4413      	add	r3, r2
 8001a22:	3304      	adds	r3, #4
 8001a24:	460a      	mov	r2, r1
 8001a26:	701a      	strb	r2, [r3, #0]
    Ultrasonic[ID].DistanceRange=Ultrasonic_config->DistanceRange;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	881a      	ldrh	r2, [r3, #0]
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4a8d      	ldr	r2, [pc, #564]	; (8001c68 <Ultrasonic_init+0x298>)
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	4413      	add	r3, r2
 8001a36:	3308      	adds	r3, #8
 8001a38:	6019      	str	r1, [r3, #0]
    Ultrasonic[ID].Timeout=(u32)((Ultrasonic[ID].DistanceRange*58.842)+.5);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4a8a      	ldr	r2, [pc, #552]	; (8001c68 <Ultrasonic_init+0x298>)
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	4413      	add	r3, r2
 8001a42:	3308      	adds	r3, #8
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe feb2 	bl	80007b0 <__aeabi_ui2d>
 8001a4c:	a384      	add	r3, pc, #528	; (adr r3, 8001c60 <Ultrasonic_init+0x290>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7fe fb8d 	bl	8000170 <__aeabi_dmul>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	4b82      	ldr	r3, [pc, #520]	; (8001c6c <Ultrasonic_init+0x29c>)
 8001a64:	f7fe fd68 	bl	8000538 <__adddf3>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	79fc      	ldrb	r4, [r7, #7]
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7fe ff17 	bl	80008a4 <__aeabi_d2uiz>
 8001a76:	4602      	mov	r2, r0
 8001a78:	497b      	ldr	r1, [pc, #492]	; (8001c68 <Ultrasonic_init+0x298>)
 8001a7a:	0123      	lsls	r3, r4, #4
 8001a7c:	440b      	add	r3, r1
 8001a7e:	330c      	adds	r3, #12
 8001a80:	601a      	str	r2, [r3, #0]
    if (Ultrasonic[ID].Echo_port == GPIO_PORTA)
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	4a78      	ldr	r2, [pc, #480]	; (8001c68 <Ultrasonic_init+0x298>)
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	4413      	add	r3, r2
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d104      	bne.n	8001a9e <Ultrasonic_init+0xce>
    {
        MCAL_Rcc_EnablePrephiral(RCC_APB2_IOPAEN,RCC_APB2);
 8001a94:	2102      	movs	r1, #2
 8001a96:	2002      	movs	r0, #2
 8001a98:	f7ff fd2e 	bl	80014f8 <MCAL_Rcc_EnablePrephiral>
 8001a9c:	e01a      	b.n	8001ad4 <Ultrasonic_init+0x104>
    }else if (Ultrasonic[ID].Echo_port == GPIO_PORTB)
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	4a71      	ldr	r2, [pc, #452]	; (8001c68 <Ultrasonic_init+0x298>)
 8001aa2:	011b      	lsls	r3, r3, #4
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d104      	bne.n	8001aba <Ultrasonic_init+0xea>
    {
        MCAL_Rcc_EnablePrephiral(RCC_APB2_IOPBEN,RCC_APB2);
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	f7ff fd20 	bl	80014f8 <MCAL_Rcc_EnablePrephiral>
 8001ab8:	e00c      	b.n	8001ad4 <Ultrasonic_init+0x104>
    }else if (Ultrasonic[ID].Echo_port == GPIO_PORTC)
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	4a6a      	ldr	r2, [pc, #424]	; (8001c68 <Ultrasonic_init+0x298>)
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d103      	bne.n	8001ad4 <Ultrasonic_init+0x104>
    {
        MCAL_Rcc_EnablePrephiral(RCC_APB2_IOPCEN,RCC_APB2);
 8001acc:	2102      	movs	r1, #2
 8001ace:	2004      	movs	r0, #4
 8001ad0:	f7ff fd12 	bl	80014f8 <MCAL_Rcc_EnablePrephiral>
    }
    if (Ultrasonic[ID].Trig_port == GPIO_PORTA)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4a64      	ldr	r2, [pc, #400]	; (8001c68 <Ultrasonic_init+0x298>)
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	4413      	add	r3, r2
 8001adc:	3304      	adds	r3, #4
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d104      	bne.n	8001af0 <Ultrasonic_init+0x120>
    {
        MCAL_Rcc_EnablePrephiral(RCC_APB2_IOPAEN,RCC_APB2);
 8001ae6:	2102      	movs	r1, #2
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f7ff fd05 	bl	80014f8 <MCAL_Rcc_EnablePrephiral>
 8001aee:	e01a      	b.n	8001b26 <Ultrasonic_init+0x156>
    }else if (Ultrasonic[ID].Trig_port == GPIO_PORTB)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4a5d      	ldr	r2, [pc, #372]	; (8001c68 <Ultrasonic_init+0x298>)
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	4413      	add	r3, r2
 8001af8:	3304      	adds	r3, #4
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d104      	bne.n	8001b0c <Ultrasonic_init+0x13c>
    {
        MCAL_Rcc_EnablePrephiral(RCC_APB2_IOPBEN,RCC_APB2);
 8001b02:	2102      	movs	r1, #2
 8001b04:	2003      	movs	r0, #3
 8001b06:	f7ff fcf7 	bl	80014f8 <MCAL_Rcc_EnablePrephiral>
 8001b0a:	e00c      	b.n	8001b26 <Ultrasonic_init+0x156>
    }else if (Ultrasonic[ID].Trig_port == GPIO_PORTC)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4a56      	ldr	r2, [pc, #344]	; (8001c68 <Ultrasonic_init+0x298>)
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	4413      	add	r3, r2
 8001b14:	3304      	adds	r3, #4
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d103      	bne.n	8001b26 <Ultrasonic_init+0x156>
    {
        MCAL_Rcc_EnablePrephiral(RCC_APB2_IOPCEN,RCC_APB2);
 8001b1e:	2102      	movs	r1, #2
 8001b20:	2004      	movs	r0, #4
 8001b22:	f7ff fce9 	bl	80014f8 <MCAL_Rcc_EnablePrephiral>
    }
    MCAL_Rcc_EnablePrephiral(RCC_APB2_AFIOEN,RCC_APB2);
 8001b26:	2102      	movs	r1, #2
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff fce5 	bl	80014f8 <MCAL_Rcc_EnablePrephiral>
    MCAL_GPIO_SetPinMode(Ultrasonic[ID].Echo_port ,Ultrasonic[ID].Echo_pin ,GPIO_INPUT_FLOATING_MODE);
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	4a4d      	ldr	r2, [pc, #308]	; (8001c68 <Ultrasonic_init+0x298>)
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	4413      	add	r3, r2
 8001b36:	3302      	adds	r3, #2
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b2d8      	uxtb	r0, r3
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	4a4a      	ldr	r2, [pc, #296]	; (8001c68 <Ultrasonic_init+0x298>)
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	4413      	add	r3, r2
 8001b44:	3301      	adds	r3, #1
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7ff f961 	bl	8000e14 <MCAL_GPIO_SetPinMode>
    MCAL_GPIO_SetPinMode(Ultrasonic[ID].Trig_port,Ultrasonic[ID].Trig_pin,GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	4a44      	ldr	r2, [pc, #272]	; (8001c68 <Ultrasonic_init+0x298>)
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	4413      	add	r3, r2
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b2d8      	uxtb	r0, r3
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4a41      	ldr	r2, [pc, #260]	; (8001c68 <Ultrasonic_init+0x298>)
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	4413      	add	r3, r2
 8001b68:	3303      	adds	r3, #3
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7ff f94f 	bl	8000e14 <MCAL_GPIO_SetPinMode>
    MCAL_AFIO_SetEXTIConfigration((EXTI_LINE0 + Ultrasonic[ID].Echo_pin),Ultrasonic[ID].Echo_port);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4a3b      	ldr	r2, [pc, #236]	; (8001c68 <Ultrasonic_init+0x298>)
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3301      	adds	r3, #1
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	4938      	ldr	r1, [pc, #224]	; (8001c68 <Ultrasonic_init+0x298>)
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f7fe fff9 	bl	8000b8c <MCAL_AFIO_SetEXTIConfigration>
    u8 EXTI_IRQ_NUM=EXTI_LINE0 + Ultrasonic[ID].Echo_pin;
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	4a32      	ldr	r2, [pc, #200]	; (8001c68 <Ultrasonic_init+0x298>)
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	73bb      	strb	r3, [r7, #14]
    if(EXTI_IRQ_NUM ==0)
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <Ultrasonic_init+0x1e6>
    {
        MCAL_NVIC_EnableIRQ(NVIC_EXTI0_IRQn);
 8001bae:	2006      	movs	r0, #6
 8001bb0:	f7ff fc3a 	bl	8001428 <MCAL_NVIC_EnableIRQ>
 8001bb4:	e028      	b.n	8001c08 <Ultrasonic_init+0x238>
    }else if (EXTI_IRQ_NUM ==1)
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d103      	bne.n	8001bc4 <Ultrasonic_init+0x1f4>
    {
        MCAL_NVIC_EnableIRQ(NVIC_EXTI1_IRQn);
 8001bbc:	2007      	movs	r0, #7
 8001bbe:	f7ff fc33 	bl	8001428 <MCAL_NVIC_EnableIRQ>
 8001bc2:	e021      	b.n	8001c08 <Ultrasonic_init+0x238>
    }else if (EXTI_IRQ_NUM ==2)
 8001bc4:	7bbb      	ldrb	r3, [r7, #14]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d103      	bne.n	8001bd2 <Ultrasonic_init+0x202>
    {
        MCAL_NVIC_EnableIRQ(NVIC_EXTI2_IRQn);
 8001bca:	2008      	movs	r0, #8
 8001bcc:	f7ff fc2c 	bl	8001428 <MCAL_NVIC_EnableIRQ>
 8001bd0:	e01a      	b.n	8001c08 <Ultrasonic_init+0x238>
    }else if (EXTI_IRQ_NUM ==3)
 8001bd2:	7bbb      	ldrb	r3, [r7, #14]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d103      	bne.n	8001be0 <Ultrasonic_init+0x210>
    {
        MCAL_NVIC_EnableIRQ(NVIC_EXTI3_IRQn);
 8001bd8:	2009      	movs	r0, #9
 8001bda:	f7ff fc25 	bl	8001428 <MCAL_NVIC_EnableIRQ>
 8001bde:	e013      	b.n	8001c08 <Ultrasonic_init+0x238>
    }else if (EXTI_IRQ_NUM ==4)
 8001be0:	7bbb      	ldrb	r3, [r7, #14]
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d103      	bne.n	8001bee <Ultrasonic_init+0x21e>
    {
        MCAL_NVIC_EnableIRQ(NVIC_EXTI4_IRQn);
 8001be6:	200a      	movs	r0, #10
 8001be8:	f7ff fc1e 	bl	8001428 <MCAL_NVIC_EnableIRQ>
 8001bec:	e00c      	b.n	8001c08 <Ultrasonic_init+0x238>
    }else if (EXTI_IRQ_NUM>=5 && EXTI_IRQ_NUM <=9)
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d906      	bls.n	8001c02 <Ultrasonic_init+0x232>
 8001bf4:	7bbb      	ldrb	r3, [r7, #14]
 8001bf6:	2b09      	cmp	r3, #9
 8001bf8:	d803      	bhi.n	8001c02 <Ultrasonic_init+0x232>
    {
        MCAL_NVIC_EnableIRQ(NVIC_EXTI9_5_IRQn);
 8001bfa:	2017      	movs	r0, #23
 8001bfc:	f7ff fc14 	bl	8001428 <MCAL_NVIC_EnableIRQ>
 8001c00:	e002      	b.n	8001c08 <Ultrasonic_init+0x238>
    }else 
    {
        MCAL_NVIC_EnableIRQ(NVIC_EXTI15_10_IRQn);
 8001c02:	2028      	movs	r0, #40	; 0x28
 8001c04:	f7ff fc10 	bl	8001428 <MCAL_NVIC_EnableIRQ>
    }

    MCAL_EXTI_SetCallback(Ultrasonic[ID].Echo_pin,CalcDistance);
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <Ultrasonic_init+0x298>)
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	3301      	adds	r3, #1
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	4916      	ldr	r1, [pc, #88]	; (8001c70 <Ultrasonic_init+0x2a0>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff f8ad 	bl	8000d78 <MCAL_EXTI_SetCallback>
    MCAL_EXTI_EnableLine(Ultrasonic[ID].Echo_pin);
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <Ultrasonic_init+0x298>)
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	4413      	add	r3, r2
 8001c26:	3301      	adds	r3, #1
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fff3 	bl	8000c18 <MCAL_EXTI_EnableLine>
    MCAL_EXTI_SetTrigger(Ultrasonic[ID].Echo_pin,EXTI_BOTH_EDGE);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <Ultrasonic_init+0x298>)
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	4413      	add	r3, r2
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2102      	movs	r1, #2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f82c 	bl	8000ca0 <MCAL_EXTI_SetTrigger>
    MCAL_SYSTICK_vINIT();
 8001c48:	f7ff fc9e 	bl	8001588 <MCAL_SYSTICK_vINIT>
    Local_FunctionStatus=E_OK;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]

    return Local_FunctionStatus;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]

}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	f3af 8000 	nop.w
 8001c60:	a7ef9db2 	.word	0xa7ef9db2
 8001c64:	404d6bc6 	.word	0x404d6bc6
 8001c68:	20000064 	.word	0x20000064
 8001c6c:	3fe00000 	.word	0x3fe00000
 8001c70:	08001dd9 	.word	0x08001dd9

08001c74 <Ultrasonic_readDistance>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType Ultrasonic_readDistance(US_ID_t ID,f32* copy_US_reading)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]
    if(Ultrasonic[ID].State == Ultrasonic_enable)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4a4d      	ldr	r2, [pc, #308]	; (8001dbc <Ultrasonic_readDistance+0x148>)
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 8089 	bne.w	8001da8 <Ultrasonic_readDistance+0x134>
    {
        echoRisingFlag=RISING_DETECTED;
 8001c96:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <Ultrasonic_readDistance+0x14c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
        readingState=READING_PENDING;
 8001c9c:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <Ultrasonic_readDistance+0x150>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
        MCAL_EXTI_EnableLine(Ultrasonic[ID].Echo_pin);
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	4a45      	ldr	r2, [pc, #276]	; (8001dbc <Ultrasonic_readDistance+0x148>)
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	4413      	add	r3, r2
 8001caa:	3301      	adds	r3, #1
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe ffb1 	bl	8000c18 <MCAL_EXTI_EnableLine>
        MCAL_EXTI_SetTrigger(Ultrasonic[ID].Echo_pin,EXTI_BOTH_EDGE);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	4a40      	ldr	r2, [pc, #256]	; (8001dbc <Ultrasonic_readDistance+0x148>)
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe ffea 	bl	8000ca0 <MCAL_EXTI_SetTrigger>
        MCAL_GPIO_SetPinValue(Ultrasonic[ID].Trig_port,Ultrasonic[ID].Trig_pin,GPIO_LOW);
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	4a3b      	ldr	r2, [pc, #236]	; (8001dbc <Ultrasonic_readDistance+0x148>)
 8001cd0:	011b      	lsls	r3, r3, #4
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b2d8      	uxtb	r0, r3
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4a37      	ldr	r2, [pc, #220]	; (8001dbc <Ultrasonic_readDistance+0x148>)
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3303      	adds	r3, #3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7ff f978 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_SYSTICK_DelayUS(2);
 8001cf0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001cf4:	f7ff fcd0 	bl	8001698 <MCAL_SYSTICK_DelayUS>
        MCAL_GPIO_SetPinValue(Ultrasonic[ID].Trig_port,Ultrasonic[ID].Trig_pin,GPIO_HIGH);
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	4a30      	ldr	r2, [pc, #192]	; (8001dbc <Ultrasonic_readDistance+0x148>)
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b2d8      	uxtb	r0, r3
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	4a2c      	ldr	r2, [pc, #176]	; (8001dbc <Ultrasonic_readDistance+0x148>)
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3303      	adds	r3, #3
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2201      	movs	r2, #1
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7ff f962 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        MCAL_SYSTICK_DelayUS(10);
 8001d1c:	482a      	ldr	r0, [pc, #168]	; (8001dc8 <Ultrasonic_readDistance+0x154>)
 8001d1e:	f7ff fcbb 	bl	8001698 <MCAL_SYSTICK_DelayUS>
        MCAL_GPIO_SetPinValue(Ultrasonic[ID].Trig_port,Ultrasonic[ID].Trig_pin,GPIO_LOW);
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <Ultrasonic_readDistance+0x148>)
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	4413      	add	r3, r2
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b2d8      	uxtb	r0, r3
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	4a22      	ldr	r2, [pc, #136]	; (8001dbc <Ultrasonic_readDistance+0x148>)
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	4413      	add	r3, r2
 8001d38:	3303      	adds	r3, #3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7ff f94d 	bl	8000fe0 <MCAL_GPIO_SetPinValue>
        while(readingState == READING_PENDING)
 8001d46:	e020      	b.n	8001d8a <Ultrasonic_readDistance+0x116>
        {
            u32 local_Counts;
            MCAL_SYSTICK_GetElapsedCounts(&local_Counts);
 8001d48:	f107 0308 	add.w	r3, r7, #8
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fc8b 	bl	8001668 <MCAL_SYSTICK_GetElapsedCounts>
            if(local_Counts>Ultrasonic[ID].Timeout)
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <Ultrasonic_readDistance+0x148>)
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	4413      	add	r3, r2
 8001d5a:	330c      	adds	r3, #12
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d212      	bcs.n	8001d8a <Ultrasonic_readDistance+0x116>
            {
                MCAL_EXTI_DisableLine(Ultrasonic[ID].Echo_pin);
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <Ultrasonic_readDistance+0x148>)
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe ff72 	bl	8000c5c <MCAL_EXTI_DisableLine>
                readingState=READING_DONE;
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <Ultrasonic_readDistance+0x150>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
                MCAL_SYSTICK_Stop();
 8001d7e:	f7ff fc3b 	bl	80015f8 <MCAL_SYSTICK_Stop>
                *copy_US_reading=OUT_OF_RANGE;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <Ultrasonic_readDistance+0x158>)
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	e004      	b.n	8001d94 <Ultrasonic_readDistance+0x120>
        while(readingState == READING_PENDING)
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <Ultrasonic_readDistance+0x150>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0d9      	beq.n	8001d48 <Ultrasonic_readDistance+0xd4>
                break;
            }
        }
        *copy_US_reading=distance;
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <Ultrasonic_readDistance+0x15c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fe59 	bl	8000a50 <__aeabi_ui2f>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	601a      	str	r2, [r3, #0]
         return Local_FunctionStatus;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	e004      	b.n	8001db2 <Ultrasonic_readDistance+0x13e>
    }
    else
    {
        *copy_US_reading=(f32)ULTRASONIC_DISABLE;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8001dae:	601a      	str	r2, [r3, #0]
        return Local_FunctionStatus;
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
    }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000064 	.word	0x20000064
 8001dc0:	20000098 	.word	0x20000098
 8001dc4:	20000099 	.word	0x20000099
 8001dc8:	41200000 	.word	0x41200000
 8001dcc:	bf800000 	.word	0xbf800000
 8001dd0:	20000094 	.word	0x20000094
 8001dd4:	00000000 	.word	0x00000000

08001dd8 <CalcDistance>:
    Ultrasonic[ID].State=state;
    Local_FunctionStatus=E_OK;
    return Local_FunctionStatus;
}
void CalcDistance()
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
    if(echoRisingFlag == RISING_DETECTED)
 8001ddc:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <CalcDistance+0x70>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d107      	bne.n	8001df6 <CalcDistance+0x1e>
    {
        MCAL_SYSTICK_SetIntervalSingle(TIMER_PERIOD, callback_fun);
 8001de6:	4919      	ldr	r1, [pc, #100]	; (8001e4c <CalcDistance+0x74>)
 8001de8:	4819      	ldr	r0, [pc, #100]	; (8001e50 <CalcDistance+0x78>)
 8001dea:	f7ff fd8f 	bl	800190c <MCAL_SYSTICK_SetIntervalSingle>
        echoRisingFlag=FALLING_DETECTED;
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <CalcDistance+0x70>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
            distance*=0.017;
            MCAL_SYSTICK_Reset();
        }

    }
}
 8001df4:	e01f      	b.n	8001e36 <CalcDistance+0x5e>
        if (readingState != READING_DONE)
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <CalcDistance+0x7c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d01a      	beq.n	8001e36 <CalcDistance+0x5e>
            readingState=READING_DONE;
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <CalcDistance+0x7c>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
            MCAL_SYSTICK_GetElapsedCounts(&distance);
 8001e06:	4814      	ldr	r0, [pc, #80]	; (8001e58 <CalcDistance+0x80>)
 8001e08:	f7ff fc2e 	bl	8001668 <MCAL_SYSTICK_GetElapsedCounts>
            distance*=0.017;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <CalcDistance+0x80>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fccd 	bl	80007b0 <__aeabi_ui2d>
 8001e16:	a30a      	add	r3, pc, #40	; (adr r3, 8001e40 <CalcDistance+0x68>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe f9a8 	bl	8000170 <__aeabi_dmul>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe fd3c 	bl	80008a4 <__aeabi_d2uiz>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <CalcDistance+0x80>)
 8001e30:	6013      	str	r3, [r2, #0]
            MCAL_SYSTICK_Reset();
 8001e32:	f7ff fbf7 	bl	8001624 <MCAL_SYSTICK_Reset>
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	b020c49c 	.word	0xb020c49c
 8001e44:	3f916872 	.word	0x3f916872
 8001e48:	20000098 	.word	0x20000098
 8001e4c:	08001e5d 	.word	0x08001e5d
 8001e50:	461c4000 	.word	0x461c4000
 8001e54:	20000099 	.word	0x20000099
 8001e58:	20000094 	.word	0x20000094

08001e5c <callback_fun>:
void callback_fun(){
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <main>:
#include "EXTI_interface.h"
#include "LCD_interface.h"
#include "US_interface.h"

int main(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
	f32 distance=0;
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
	MCAL_RCC_InitSysClock();
 8001e74:	f7ff fb16 	bl	80014a4 <MCAL_RCC_InitSysClock>
	US_ID_t mid=Middle;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	73fb      	strb	r3, [r7, #15]
	US_config_t mid_conf={.DistanceRange=500,
 8001e7c:	4a10      	ldr	r2, [pc, #64]	; (8001ec0 <main+0x58>)
 8001e7e:	463b      	mov	r3, r7
 8001e80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e84:	e883 0003 	stmia.w	r3, {r0, r1}
						  .Echo_pin=GPIO_PIN1,
						  .Echo_port=GPIO_PORTB,
						  .Trigger_pin=GPIO_PIN2,
						  .Trigger_port=GPIO_PORTB,
						  .state=Ultrasonic_enable};
	MCAL_Rcc_EnablePrephiral(RCC_APB2_IOPAEN, RCC_APB2);
 8001e88:	2102      	movs	r1, #2
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	f7ff fb34 	bl	80014f8 <MCAL_Rcc_EnablePrephiral>
	LCD_Init();
 8001e90:	f7ff f936 	bl	8001100 <LCD_Init>
	Ultrasonic_init(mid, &mid_conf);
 8001e94:	463a      	mov	r2, r7
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fd98 	bl	80019d0 <Ultrasonic_init>
	Ultrasonic_readDistance(mid, &distance);
 8001ea0:	f107 0208 	add.w	r2, r7, #8
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fee3 	bl	8001c74 <Ultrasonic_readDistance>
	LCD_SendIntger(distance);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fe25 	bl	8000b00 <__aeabi_f2iz>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fa99 	bl	80013f0 <LCD_SendIntger>
	for(;;)
 8001ebe:	e7fe      	b.n	8001ebe <main+0x56>
 8001ec0:	08002030 	.word	0x08002030

08001ec4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ec4:	480d      	ldr	r0, [pc, #52]	; (8001efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ec6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ec8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ece:	490d      	ldr	r1, [pc, #52]	; (8001f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <LoopForever+0xe>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee4:	4c0a      	ldr	r4, [pc, #40]	; (8001f10 <LoopForever+0x16>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ef2:	f000 f811 	bl	8001f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ef6:	f7ff ffb7 	bl	8001e68 <main>

08001efa <LoopForever>:

LoopForever:
  b LoopForever
 8001efa:	e7fe      	b.n	8001efa <LoopForever>
  ldr   r0, =_estack
 8001efc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001f08:	08002068 	.word	0x08002068
  ldr r2, =_sbss
 8001f0c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001f10:	2000009c 	.word	0x2000009c

08001f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC1_2_IRQHandler>
	...

08001f18 <__libc_init_array>:
 8001f18:	b570      	push	{r4, r5, r6, lr}
 8001f1a:	2600      	movs	r6, #0
 8001f1c:	4d0c      	ldr	r5, [pc, #48]	; (8001f50 <__libc_init_array+0x38>)
 8001f1e:	4c0d      	ldr	r4, [pc, #52]	; (8001f54 <__libc_init_array+0x3c>)
 8001f20:	1b64      	subs	r4, r4, r5
 8001f22:	10a4      	asrs	r4, r4, #2
 8001f24:	42a6      	cmp	r6, r4
 8001f26:	d109      	bne.n	8001f3c <__libc_init_array+0x24>
 8001f28:	f000 f876 	bl	8002018 <_init>
 8001f2c:	2600      	movs	r6, #0
 8001f2e:	4d0a      	ldr	r5, [pc, #40]	; (8001f58 <__libc_init_array+0x40>)
 8001f30:	4c0a      	ldr	r4, [pc, #40]	; (8001f5c <__libc_init_array+0x44>)
 8001f32:	1b64      	subs	r4, r4, r5
 8001f34:	10a4      	asrs	r4, r4, #2
 8001f36:	42a6      	cmp	r6, r4
 8001f38:	d105      	bne.n	8001f46 <__libc_init_array+0x2e>
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}
 8001f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f40:	4798      	blx	r3
 8001f42:	3601      	adds	r6, #1
 8001f44:	e7ee      	b.n	8001f24 <__libc_init_array+0xc>
 8001f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f4a:	4798      	blx	r3
 8001f4c:	3601      	adds	r6, #1
 8001f4e:	e7f2      	b.n	8001f36 <__libc_init_array+0x1e>
 8001f50:	08002060 	.word	0x08002060
 8001f54:	08002060 	.word	0x08002060
 8001f58:	08002060 	.word	0x08002060
 8001f5c:	08002064 	.word	0x08002064

08001f60 <__itoa>:
 8001f60:	1e93      	subs	r3, r2, #2
 8001f62:	2b22      	cmp	r3, #34	; 0x22
 8001f64:	b510      	push	{r4, lr}
 8001f66:	460c      	mov	r4, r1
 8001f68:	d904      	bls.n	8001f74 <__itoa+0x14>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	461c      	mov	r4, r3
 8001f6e:	700b      	strb	r3, [r1, #0]
 8001f70:	4620      	mov	r0, r4
 8001f72:	bd10      	pop	{r4, pc}
 8001f74:	2a0a      	cmp	r2, #10
 8001f76:	d109      	bne.n	8001f8c <__itoa+0x2c>
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	da07      	bge.n	8001f8c <__itoa+0x2c>
 8001f7c:	232d      	movs	r3, #45	; 0x2d
 8001f7e:	700b      	strb	r3, [r1, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	4240      	negs	r0, r0
 8001f84:	4421      	add	r1, r4
 8001f86:	f000 f805 	bl	8001f94 <__utoa>
 8001f8a:	e7f1      	b.n	8001f70 <__itoa+0x10>
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	e7f9      	b.n	8001f84 <__itoa+0x24>

08001f90 <itoa>:
 8001f90:	f7ff bfe6 	b.w	8001f60 <__itoa>

08001f94 <__utoa>:
 8001f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f96:	b08b      	sub	sp, #44	; 0x2c
 8001f98:	4605      	mov	r5, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	466e      	mov	r6, sp
 8001f9e:	4c1d      	ldr	r4, [pc, #116]	; (8002014 <__utoa+0x80>)
 8001fa0:	f104 0c20 	add.w	ip, r4, #32
 8001fa4:	4637      	mov	r7, r6
 8001fa6:	6820      	ldr	r0, [r4, #0]
 8001fa8:	6861      	ldr	r1, [r4, #4]
 8001faa:	3408      	adds	r4, #8
 8001fac:	c703      	stmia	r7!, {r0, r1}
 8001fae:	4564      	cmp	r4, ip
 8001fb0:	463e      	mov	r6, r7
 8001fb2:	d1f7      	bne.n	8001fa4 <__utoa+0x10>
 8001fb4:	7921      	ldrb	r1, [r4, #4]
 8001fb6:	6820      	ldr	r0, [r4, #0]
 8001fb8:	7139      	strb	r1, [r7, #4]
 8001fba:	1e91      	subs	r1, r2, #2
 8001fbc:	2922      	cmp	r1, #34	; 0x22
 8001fbe:	6038      	str	r0, [r7, #0]
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	d904      	bls.n	8001fd0 <__utoa+0x3c>
 8001fc6:	7019      	strb	r1, [r3, #0]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4618      	mov	r0, r3
 8001fcc:	b00b      	add	sp, #44	; 0x2c
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd0:	1e58      	subs	r0, r3, #1
 8001fd2:	4684      	mov	ip, r0
 8001fd4:	fbb5 f7f2 	udiv	r7, r5, r2
 8001fd8:	fb02 5617 	mls	r6, r2, r7, r5
 8001fdc:	3628      	adds	r6, #40	; 0x28
 8001fde:	446e      	add	r6, sp
 8001fe0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8001fe4:	460c      	mov	r4, r1
 8001fe6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8001fea:	462e      	mov	r6, r5
 8001fec:	42b2      	cmp	r2, r6
 8001fee:	463d      	mov	r5, r7
 8001ff0:	f101 0101 	add.w	r1, r1, #1
 8001ff4:	d9ee      	bls.n	8001fd4 <__utoa+0x40>
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	545a      	strb	r2, [r3, r1]
 8001ffa:	1919      	adds	r1, r3, r4
 8001ffc:	1aa5      	subs	r5, r4, r2
 8001ffe:	42aa      	cmp	r2, r5
 8002000:	dae3      	bge.n	8001fca <__utoa+0x36>
 8002002:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002006:	780e      	ldrb	r6, [r1, #0]
 8002008:	3201      	adds	r2, #1
 800200a:	7006      	strb	r6, [r0, #0]
 800200c:	f801 5901 	strb.w	r5, [r1], #-1
 8002010:	e7f4      	b.n	8001ffc <__utoa+0x68>
 8002012:	bf00      	nop
 8002014:	08002038 	.word	0x08002038

08002018 <_init>:
 8002018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201a:	bf00      	nop
 800201c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800201e:	bc08      	pop	{r3}
 8002020:	469e      	mov	lr, r3
 8002022:	4770      	bx	lr

08002024 <_fini>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	bf00      	nop
 8002028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202a:	bc08      	pop	{r3}
 800202c:	469e      	mov	lr, r3
 800202e:	4770      	bx	lr
