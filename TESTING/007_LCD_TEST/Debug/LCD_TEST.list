
LCD_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001060  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001190  08001190  00011190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011a0  080011a0  000111a8  2**0
                  CONTENTS
  4 .ARM          00000000  080011a0  080011a0  000111a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011a0  080011a8  000111a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011a0  080011a0  000111a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011a4  080011a4  000111a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  080011a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080011a8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000100c  00000000  00000000  000111d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000567  00000000  00000000  000121dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00012748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00012928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001236  00000000  00000000  00012ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e31  00000000  00000000  00013ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000049a8  00000000  00000000  00014b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000194bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000774  00000000  00000000  00019510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001178 	.word	0x08001178

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001178 	.word	0x08001178

08000170 <__aeabi_dmul>:
 8000170:	b570      	push	{r4, r5, r6, lr}
 8000172:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000176:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800017a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800017e:	bf1d      	ittte	ne
 8000180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000184:	ea94 0f0c 	teqne	r4, ip
 8000188:	ea95 0f0c 	teqne	r5, ip
 800018c:	f000 f8de 	bleq	800034c <__aeabi_dmul+0x1dc>
 8000190:	442c      	add	r4, r5
 8000192:	ea81 0603 	eor.w	r6, r1, r3
 8000196:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800019e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a2:	bf18      	it	ne
 80001a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b0:	d038      	beq.n	8000224 <__aeabi_dmul+0xb4>
 80001b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001b6:	f04f 0500 	mov.w	r5, #0
 80001ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001c6:	f04f 0600 	mov.w	r6, #0
 80001ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ce:	f09c 0f00 	teq	ip, #0
 80001d2:	bf18      	it	ne
 80001d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001e4:	d204      	bcs.n	80001f0 <__aeabi_dmul+0x80>
 80001e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ea:	416d      	adcs	r5, r5
 80001ec:	eb46 0606 	adc.w	r6, r6, r6
 80001f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000200:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000204:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000208:	bf88      	it	hi
 800020a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800020e:	d81e      	bhi.n	800024e <__aeabi_dmul+0xde>
 8000210:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000214:	bf08      	it	eq
 8000216:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021a:	f150 0000 	adcs.w	r0, r0, #0
 800021e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000222:	bd70      	pop	{r4, r5, r6, pc}
 8000224:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000228:	ea46 0101 	orr.w	r1, r6, r1
 800022c:	ea40 0002 	orr.w	r0, r0, r2
 8000230:	ea81 0103 	eor.w	r1, r1, r3
 8000234:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000238:	bfc2      	ittt	gt
 800023a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800023e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000242:	bd70      	popgt	{r4, r5, r6, pc}
 8000244:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000248:	f04f 0e00 	mov.w	lr, #0
 800024c:	3c01      	subs	r4, #1
 800024e:	f300 80ab 	bgt.w	80003a8 <__aeabi_dmul+0x238>
 8000252:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000256:	bfde      	ittt	le
 8000258:	2000      	movle	r0, #0
 800025a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800025e:	bd70      	pople	{r4, r5, r6, pc}
 8000260:	f1c4 0400 	rsb	r4, r4, #0
 8000264:	3c20      	subs	r4, #32
 8000266:	da35      	bge.n	80002d4 <__aeabi_dmul+0x164>
 8000268:	340c      	adds	r4, #12
 800026a:	dc1b      	bgt.n	80002a4 <__aeabi_dmul+0x134>
 800026c:	f104 0414 	add.w	r4, r4, #20
 8000270:	f1c4 0520 	rsb	r5, r4, #32
 8000274:	fa00 f305 	lsl.w	r3, r0, r5
 8000278:	fa20 f004 	lsr.w	r0, r0, r4
 800027c:	fa01 f205 	lsl.w	r2, r1, r5
 8000280:	ea40 0002 	orr.w	r0, r0, r2
 8000284:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800028c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000290:	fa21 f604 	lsr.w	r6, r1, r4
 8000294:	eb42 0106 	adc.w	r1, r2, r6
 8000298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800029c:	bf08      	it	eq
 800029e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f1c4 040c 	rsb	r4, r4, #12
 80002a8:	f1c4 0520 	rsb	r5, r4, #32
 80002ac:	fa00 f304 	lsl.w	r3, r0, r4
 80002b0:	fa20 f005 	lsr.w	r0, r0, r5
 80002b4:	fa01 f204 	lsl.w	r2, r1, r4
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002cc:	bf08      	it	eq
 80002ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f205 	lsl.w	r2, r0, r5
 80002dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e0:	fa20 f304 	lsr.w	r3, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea43 0302 	orr.w	r3, r3, r2
 80002ec:	fa21 f004 	lsr.w	r0, r1, r4
 80002f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	fa21 f204 	lsr.w	r2, r1, r4
 80002f8:	ea20 0002 	bic.w	r0, r0, r2
 80002fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f094 0f00 	teq	r4, #0
 8000310:	d10f      	bne.n	8000332 <__aeabi_dmul+0x1c2>
 8000312:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000316:	0040      	lsls	r0, r0, #1
 8000318:	eb41 0101 	adc.w	r1, r1, r1
 800031c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3c01      	subeq	r4, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1a6>
 8000326:	ea41 0106 	orr.w	r1, r1, r6
 800032a:	f095 0f00 	teq	r5, #0
 800032e:	bf18      	it	ne
 8000330:	4770      	bxne	lr
 8000332:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	eb43 0303 	adc.w	r3, r3, r3
 800033c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000340:	bf08      	it	eq
 8000342:	3d01      	subeq	r5, #1
 8000344:	d0f7      	beq.n	8000336 <__aeabi_dmul+0x1c6>
 8000346:	ea43 0306 	orr.w	r3, r3, r6
 800034a:	4770      	bx	lr
 800034c:	ea94 0f0c 	teq	r4, ip
 8000350:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000354:	bf18      	it	ne
 8000356:	ea95 0f0c 	teqne	r5, ip
 800035a:	d00c      	beq.n	8000376 <__aeabi_dmul+0x206>
 800035c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000360:	bf18      	it	ne
 8000362:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000366:	d1d1      	bne.n	800030c <__aeabi_dmul+0x19c>
 8000368:	ea81 0103 	eor.w	r1, r1, r3
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	f04f 0000 	mov.w	r0, #0
 8000374:	bd70      	pop	{r4, r5, r6, pc}
 8000376:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037a:	bf06      	itte	eq
 800037c:	4610      	moveq	r0, r2
 800037e:	4619      	moveq	r1, r3
 8000380:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000384:	d019      	beq.n	80003ba <__aeabi_dmul+0x24a>
 8000386:	ea94 0f0c 	teq	r4, ip
 800038a:	d102      	bne.n	8000392 <__aeabi_dmul+0x222>
 800038c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000390:	d113      	bne.n	80003ba <__aeabi_dmul+0x24a>
 8000392:	ea95 0f0c 	teq	r5, ip
 8000396:	d105      	bne.n	80003a4 <__aeabi_dmul+0x234>
 8000398:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800039c:	bf1c      	itt	ne
 800039e:	4610      	movne	r0, r2
 80003a0:	4619      	movne	r1, r3
 80003a2:	d10a      	bne.n	80003ba <__aeabi_dmul+0x24a>
 80003a4:	ea81 0103 	eor.w	r1, r1, r3
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd70      	pop	{r4, r5, r6, pc}
 80003ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003c2:	bd70      	pop	{r4, r5, r6, pc}

080003c4 <__aeabi_drsub>:
 80003c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	e002      	b.n	80003d0 <__adddf3>
 80003ca:	bf00      	nop

080003cc <__aeabi_dsub>:
 80003cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003d0 <__adddf3>:
 80003d0:	b530      	push	{r4, r5, lr}
 80003d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	bf1f      	itttt	ne
 80003e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f6:	f000 80e2 	beq.w	80005be <__adddf3+0x1ee>
 80003fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000402:	bfb8      	it	lt
 8000404:	426d      	neglt	r5, r5
 8000406:	dd0c      	ble.n	8000422 <__adddf3+0x52>
 8000408:	442c      	add	r4, r5
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	ea82 0000 	eor.w	r0, r2, r0
 8000416:	ea83 0101 	eor.w	r1, r3, r1
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	2d36      	cmp	r5, #54	; 0x36
 8000424:	bf88      	it	hi
 8000426:	bd30      	pophi	{r4, r5, pc}
 8000428:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800042c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000430:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000434:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x70>
 800043a:	4240      	negs	r0, r0
 800043c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000440:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000444:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000448:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800044c:	d002      	beq.n	8000454 <__adddf3+0x84>
 800044e:	4252      	negs	r2, r2
 8000450:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000454:	ea94 0f05 	teq	r4, r5
 8000458:	f000 80a7 	beq.w	80005aa <__adddf3+0x1da>
 800045c:	f1a4 0401 	sub.w	r4, r4, #1
 8000460:	f1d5 0e20 	rsbs	lr, r5, #32
 8000464:	db0d      	blt.n	8000482 <__adddf3+0xb2>
 8000466:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046a:	fa22 f205 	lsr.w	r2, r2, r5
 800046e:	1880      	adds	r0, r0, r2
 8000470:	f141 0100 	adc.w	r1, r1, #0
 8000474:	fa03 f20e 	lsl.w	r2, r3, lr
 8000478:	1880      	adds	r0, r0, r2
 800047a:	fa43 f305 	asr.w	r3, r3, r5
 800047e:	4159      	adcs	r1, r3
 8000480:	e00e      	b.n	80004a0 <__adddf3+0xd0>
 8000482:	f1a5 0520 	sub.w	r5, r5, #32
 8000486:	f10e 0e20 	add.w	lr, lr, #32
 800048a:	2a01      	cmp	r2, #1
 800048c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000490:	bf28      	it	cs
 8000492:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	18c0      	adds	r0, r0, r3
 800049c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a4:	d507      	bpl.n	80004b6 <__adddf3+0xe6>
 80004a6:	f04f 0e00 	mov.w	lr, #0
 80004aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ba:	d31b      	bcc.n	80004f4 <__adddf3+0x124>
 80004bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004c0:	d30c      	bcc.n	80004dc <__adddf3+0x10c>
 80004c2:	0849      	lsrs	r1, r1, #1
 80004c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004cc:	f104 0401 	add.w	r4, r4, #1
 80004d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d8:	f080 809a 	bcs.w	8000610 <__adddf3+0x240>
 80004dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004e0:	bf08      	it	eq
 80004e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e6:	f150 0000 	adcs.w	r0, r0, #0
 80004ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ee:	ea41 0105 	orr.w	r1, r1, r5
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f8:	4140      	adcs	r0, r0
 80004fa:	eb41 0101 	adc.w	r1, r1, r1
 80004fe:	3c01      	subs	r4, #1
 8000500:	bf28      	it	cs
 8000502:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000506:	d2e9      	bcs.n	80004dc <__adddf3+0x10c>
 8000508:	f091 0f00 	teq	r1, #0
 800050c:	bf04      	itt	eq
 800050e:	4601      	moveq	r1, r0
 8000510:	2000      	moveq	r0, #0
 8000512:	fab1 f381 	clz	r3, r1
 8000516:	bf08      	it	eq
 8000518:	3320      	addeq	r3, #32
 800051a:	f1a3 030b 	sub.w	r3, r3, #11
 800051e:	f1b3 0220 	subs.w	r2, r3, #32
 8000522:	da0c      	bge.n	800053e <__adddf3+0x16e>
 8000524:	320c      	adds	r2, #12
 8000526:	dd08      	ble.n	800053a <__adddf3+0x16a>
 8000528:	f102 0c14 	add.w	ip, r2, #20
 800052c:	f1c2 020c 	rsb	r2, r2, #12
 8000530:	fa01 f00c 	lsl.w	r0, r1, ip
 8000534:	fa21 f102 	lsr.w	r1, r1, r2
 8000538:	e00c      	b.n	8000554 <__adddf3+0x184>
 800053a:	f102 0214 	add.w	r2, r2, #20
 800053e:	bfd8      	it	le
 8000540:	f1c2 0c20 	rsble	ip, r2, #32
 8000544:	fa01 f102 	lsl.w	r1, r1, r2
 8000548:	fa20 fc0c 	lsr.w	ip, r0, ip
 800054c:	bfdc      	itt	le
 800054e:	ea41 010c 	orrle.w	r1, r1, ip
 8000552:	4090      	lslle	r0, r2
 8000554:	1ae4      	subs	r4, r4, r3
 8000556:	bfa2      	ittt	ge
 8000558:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800055c:	4329      	orrge	r1, r5
 800055e:	bd30      	popge	{r4, r5, pc}
 8000560:	ea6f 0404 	mvn.w	r4, r4
 8000564:	3c1f      	subs	r4, #31
 8000566:	da1c      	bge.n	80005a2 <__adddf3+0x1d2>
 8000568:	340c      	adds	r4, #12
 800056a:	dc0e      	bgt.n	800058a <__adddf3+0x1ba>
 800056c:	f104 0414 	add.w	r4, r4, #20
 8000570:	f1c4 0220 	rsb	r2, r4, #32
 8000574:	fa20 f004 	lsr.w	r0, r0, r4
 8000578:	fa01 f302 	lsl.w	r3, r1, r2
 800057c:	ea40 0003 	orr.w	r0, r0, r3
 8000580:	fa21 f304 	lsr.w	r3, r1, r4
 8000584:	ea45 0103 	orr.w	r1, r5, r3
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f1c4 040c 	rsb	r4, r4, #12
 800058e:	f1c4 0220 	rsb	r2, r4, #32
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 f304 	lsl.w	r3, r1, r4
 800059a:	ea40 0003 	orr.w	r0, r0, r3
 800059e:	4629      	mov	r1, r5
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	fa21 f004 	lsr.w	r0, r1, r4
 80005a6:	4629      	mov	r1, r5
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	f094 0f00 	teq	r4, #0
 80005ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005b2:	bf06      	itte	eq
 80005b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b8:	3401      	addeq	r4, #1
 80005ba:	3d01      	subne	r5, #1
 80005bc:	e74e      	b.n	800045c <__adddf3+0x8c>
 80005be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c2:	bf18      	it	ne
 80005c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c8:	d029      	beq.n	800061e <__adddf3+0x24e>
 80005ca:	ea94 0f05 	teq	r4, r5
 80005ce:	bf08      	it	eq
 80005d0:	ea90 0f02 	teqeq	r0, r2
 80005d4:	d005      	beq.n	80005e2 <__adddf3+0x212>
 80005d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005da:	bf04      	itt	eq
 80005dc:	4619      	moveq	r1, r3
 80005de:	4610      	moveq	r0, r2
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	ea91 0f03 	teq	r1, r3
 80005e6:	bf1e      	ittt	ne
 80005e8:	2100      	movne	r1, #0
 80005ea:	2000      	movne	r0, #0
 80005ec:	bd30      	popne	{r4, r5, pc}
 80005ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f2:	d105      	bne.n	8000600 <__adddf3+0x230>
 80005f4:	0040      	lsls	r0, r0, #1
 80005f6:	4149      	adcs	r1, r1
 80005f8:	bf28      	it	cs
 80005fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fe:	bd30      	pop	{r4, r5, pc}
 8000600:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000604:	bf3c      	itt	cc
 8000606:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800060a:	bd30      	popcc	{r4, r5, pc}
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000610:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000614:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf1a      	itte	ne
 8000624:	4619      	movne	r1, r3
 8000626:	4610      	movne	r0, r2
 8000628:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800062c:	bf1c      	itt	ne
 800062e:	460b      	movne	r3, r1
 8000630:	4602      	movne	r2, r0
 8000632:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000636:	bf06      	itte	eq
 8000638:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800063c:	ea91 0f03 	teqeq	r1, r3
 8000640:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop

08000648 <__aeabi_ui2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f04f 0500 	mov.w	r5, #0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e750      	b.n	8000508 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_i2d>:
 8000668:	f090 0f00 	teq	r0, #0
 800066c:	bf04      	itt	eq
 800066e:	2100      	moveq	r1, #0
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000678:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000680:	bf48      	it	mi
 8000682:	4240      	negmi	r0, r0
 8000684:	f04f 0100 	mov.w	r1, #0
 8000688:	e73e      	b.n	8000508 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_f2d>:
 800068c:	0042      	lsls	r2, r0, #1
 800068e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000692:	ea4f 0131 	mov.w	r1, r1, rrx
 8000696:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069a:	bf1f      	itttt	ne
 800069c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a8:	4770      	bxne	lr
 80006aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ae:	bf08      	it	eq
 80006b0:	4770      	bxeq	lr
 80006b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b6:	bf04      	itt	eq
 80006b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006bc:	4770      	bxeq	lr
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	e71c      	b.n	8000508 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_ul2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f04f 0500 	mov.w	r5, #0
 80006de:	e00a      	b.n	80006f6 <__aeabi_l2d+0x16>

080006e0 <__aeabi_l2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ee:	d502      	bpl.n	80006f6 <__aeabi_l2d+0x16>
 80006f0:	4240      	negs	r0, r0
 80006f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000702:	f43f aed8 	beq.w	80004b6 <__adddf3+0xe6>
 8000706:	f04f 0203 	mov.w	r2, #3
 800070a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070e:	bf18      	it	ne
 8000710:	3203      	addne	r2, #3
 8000712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000716:	bf18      	it	ne
 8000718:	3203      	addne	r2, #3
 800071a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071e:	f1c2 0320 	rsb	r3, r2, #32
 8000722:	fa00 fc03 	lsl.w	ip, r0, r3
 8000726:	fa20 f002 	lsr.w	r0, r0, r2
 800072a:	fa01 fe03 	lsl.w	lr, r1, r3
 800072e:	ea40 000e 	orr.w	r0, r0, lr
 8000732:	fa21 f102 	lsr.w	r1, r1, r2
 8000736:	4414      	add	r4, r2
 8000738:	e6bd      	b.n	80004b6 <__adddf3+0xe6>
 800073a:	bf00      	nop

0800073c <__aeabi_d2uiz>:
 800073c:	004a      	lsls	r2, r1, #1
 800073e:	d211      	bcs.n	8000764 <__aeabi_d2uiz+0x28>
 8000740:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000744:	d211      	bcs.n	800076a <__aeabi_d2uiz+0x2e>
 8000746:	d50d      	bpl.n	8000764 <__aeabi_d2uiz+0x28>
 8000748:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800074c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000750:	d40e      	bmi.n	8000770 <__aeabi_d2uiz+0x34>
 8000752:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800075e:	fa23 f002 	lsr.w	r0, r3, r2
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800076e:	d102      	bne.n	8000776 <__aeabi_d2uiz+0x3a>
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	4770      	bx	lr
 8000776:	f04f 0000 	mov.w	r0, #0
 800077a:	4770      	bx	lr

0800077c <MCAL_GPIO_SetPinMode>:
#include "GPIO_private.h"
#include "GPIO_config.h"
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_GPIO_SetPinMode(u8 Copy_PortID , u8 Copy_PinID , u8 Copy_PinMode)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	460b      	mov	r3, r1
 8000788:	71bb      	strb	r3, [r7, #6]
 800078a:	4613      	mov	r3, r2
 800078c:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	73fb      	strb	r3, [r7, #15]
    switch (Copy_PortID)
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b02      	cmp	r3, #2
 8000796:	f000 8088 	beq.w	80008aa <MCAL_GPIO_SetPinMode+0x12e>
 800079a:	2b02      	cmp	r3, #2
 800079c:	f300 80c5 	bgt.w	800092a <MCAL_GPIO_SetPinMode+0x1ae>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d002      	beq.n	80007aa <MCAL_GPIO_SetPinMode+0x2e>
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d040      	beq.n	800082a <MCAL_GPIO_SetPinMode+0xae>
 80007a8:	e0bf      	b.n	800092a <MCAL_GPIO_SetPinMode+0x1ae>
    {
    case GPIO_PORTA:
        if( Copy_PinID < 8 )
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	2b07      	cmp	r3, #7
 80007ae:	d819      	bhi.n	80007e4 <MCAL_GPIO_SetPinMode+0x68>
        {
            MCAL_GPIOA->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 80007b0:	4b62      	ldr	r3, [pc, #392]	; (800093c <MCAL_GPIO_SetPinMode+0x1c0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	79ba      	ldrb	r2, [r7, #6]
 80007b6:	0092      	lsls	r2, r2, #2
 80007b8:	210f      	movs	r1, #15
 80007ba:	fa01 f202 	lsl.w	r2, r1, r2
 80007be:	43d2      	mvns	r2, r2
 80007c0:	4611      	mov	r1, r2
 80007c2:	4a5e      	ldr	r2, [pc, #376]	; (800093c <MCAL_GPIO_SetPinMode+0x1c0>)
 80007c4:	400b      	ands	r3, r1
 80007c6:	6013      	str	r3, [r2, #0]
            MCAL_GPIOA->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 80007c8:	4b5c      	ldr	r3, [pc, #368]	; (800093c <MCAL_GPIO_SetPinMode+0x1c0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	7979      	ldrb	r1, [r7, #5]
 80007ce:	79ba      	ldrb	r2, [r7, #6]
 80007d0:	0092      	lsls	r2, r2, #2
 80007d2:	fa01 f202 	lsl.w	r2, r1, r2
 80007d6:	4611      	mov	r1, r2
 80007d8:	4a58      	ldr	r2, [pc, #352]	; (800093c <MCAL_GPIO_SetPinMode+0x1c0>)
 80007da:	430b      	orrs	r3, r1
 80007dc:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80007de:	2301      	movs	r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 80007e2:	e0a5      	b.n	8000930 <MCAL_GPIO_SetPinMode+0x1b4>
        }else if ( Copy_PinID < 16)
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	2b0f      	cmp	r3, #15
 80007e8:	d81c      	bhi.n	8000824 <MCAL_GPIO_SetPinMode+0xa8>
            Copy_PinID=Copy_PinID-8;
 80007ea:	79bb      	ldrb	r3, [r7, #6]
 80007ec:	3b08      	subs	r3, #8
 80007ee:	71bb      	strb	r3, [r7, #6]
            MCAL_GPIOA->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 80007f0:	4b52      	ldr	r3, [pc, #328]	; (800093c <MCAL_GPIO_SetPinMode+0x1c0>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	0092      	lsls	r2, r2, #2
 80007f8:	210f      	movs	r1, #15
 80007fa:	fa01 f202 	lsl.w	r2, r1, r2
 80007fe:	43d2      	mvns	r2, r2
 8000800:	4611      	mov	r1, r2
 8000802:	4a4e      	ldr	r2, [pc, #312]	; (800093c <MCAL_GPIO_SetPinMode+0x1c0>)
 8000804:	400b      	ands	r3, r1
 8000806:	6053      	str	r3, [r2, #4]
            MCAL_GPIOA->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000808:	4b4c      	ldr	r3, [pc, #304]	; (800093c <MCAL_GPIO_SetPinMode+0x1c0>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	7979      	ldrb	r1, [r7, #5]
 800080e:	79ba      	ldrb	r2, [r7, #6]
 8000810:	0092      	lsls	r2, r2, #2
 8000812:	fa01 f202 	lsl.w	r2, r1, r2
 8000816:	4611      	mov	r1, r2
 8000818:	4a48      	ldr	r2, [pc, #288]	; (800093c <MCAL_GPIO_SetPinMode+0x1c0>)
 800081a:	430b      	orrs	r3, r1
 800081c:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 800081e:	2301      	movs	r3, #1
 8000820:	73fb      	strb	r3, [r7, #15]
    break;
 8000822:	e085      	b.n	8000930 <MCAL_GPIO_SetPinMode+0x1b4>
            Local_FunctionStatus = E_NOT_OK;
 8000824:	2300      	movs	r3, #0
 8000826:	73fb      	strb	r3, [r7, #15]
    break;
 8000828:	e082      	b.n	8000930 <MCAL_GPIO_SetPinMode+0x1b4>
    case GPIO_PORTB:
        if( Copy_PinID < 8 )
 800082a:	79bb      	ldrb	r3, [r7, #6]
 800082c:	2b07      	cmp	r3, #7
 800082e:	d819      	bhi.n	8000864 <MCAL_GPIO_SetPinMode+0xe8>
        {
            MCAL_GPIOB->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 8000830:	4b43      	ldr	r3, [pc, #268]	; (8000940 <MCAL_GPIO_SetPinMode+0x1c4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	0092      	lsls	r2, r2, #2
 8000838:	210f      	movs	r1, #15
 800083a:	fa01 f202 	lsl.w	r2, r1, r2
 800083e:	43d2      	mvns	r2, r2
 8000840:	4611      	mov	r1, r2
 8000842:	4a3f      	ldr	r2, [pc, #252]	; (8000940 <MCAL_GPIO_SetPinMode+0x1c4>)
 8000844:	400b      	ands	r3, r1
 8000846:	6013      	str	r3, [r2, #0]
            MCAL_GPIOB->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000848:	4b3d      	ldr	r3, [pc, #244]	; (8000940 <MCAL_GPIO_SetPinMode+0x1c4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	7979      	ldrb	r1, [r7, #5]
 800084e:	79ba      	ldrb	r2, [r7, #6]
 8000850:	0092      	lsls	r2, r2, #2
 8000852:	fa01 f202 	lsl.w	r2, r1, r2
 8000856:	4611      	mov	r1, r2
 8000858:	4a39      	ldr	r2, [pc, #228]	; (8000940 <MCAL_GPIO_SetPinMode+0x1c4>)
 800085a:	430b      	orrs	r3, r1
 800085c:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 800085e:	2301      	movs	r3, #1
 8000860:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 8000862:	e065      	b.n	8000930 <MCAL_GPIO_SetPinMode+0x1b4>
        }else if ( Copy_PinID < 16)
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	2b0f      	cmp	r3, #15
 8000868:	d81c      	bhi.n	80008a4 <MCAL_GPIO_SetPinMode+0x128>
            Copy_PinID=Copy_PinID-8;
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	3b08      	subs	r3, #8
 800086e:	71bb      	strb	r3, [r7, #6]
            MCAL_GPIOB->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 8000870:	4b33      	ldr	r3, [pc, #204]	; (8000940 <MCAL_GPIO_SetPinMode+0x1c4>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	79ba      	ldrb	r2, [r7, #6]
 8000876:	0092      	lsls	r2, r2, #2
 8000878:	210f      	movs	r1, #15
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	43d2      	mvns	r2, r2
 8000880:	4611      	mov	r1, r2
 8000882:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <MCAL_GPIO_SetPinMode+0x1c4>)
 8000884:	400b      	ands	r3, r1
 8000886:	6053      	str	r3, [r2, #4]
            MCAL_GPIOB->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000888:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <MCAL_GPIO_SetPinMode+0x1c4>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	7979      	ldrb	r1, [r7, #5]
 800088e:	79ba      	ldrb	r2, [r7, #6]
 8000890:	0092      	lsls	r2, r2, #2
 8000892:	fa01 f202 	lsl.w	r2, r1, r2
 8000896:	4611      	mov	r1, r2
 8000898:	4a29      	ldr	r2, [pc, #164]	; (8000940 <MCAL_GPIO_SetPinMode+0x1c4>)
 800089a:	430b      	orrs	r3, r1
 800089c:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 800089e:	2301      	movs	r3, #1
 80008a0:	73fb      	strb	r3, [r7, #15]
    break;
 80008a2:	e045      	b.n	8000930 <MCAL_GPIO_SetPinMode+0x1b4>
            Local_FunctionStatus = E_NOT_OK;
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]
    break;
 80008a8:	e042      	b.n	8000930 <MCAL_GPIO_SetPinMode+0x1b4>
    case GPIO_PORTC:
        if( Copy_PinID < 8 )
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	2b07      	cmp	r3, #7
 80008ae:	d819      	bhi.n	80008e4 <MCAL_GPIO_SetPinMode+0x168>
        {
            MCAL_GPIOC->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MCAL_GPIO_SetPinMode+0x1c8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	79ba      	ldrb	r2, [r7, #6]
 80008b6:	0092      	lsls	r2, r2, #2
 80008b8:	210f      	movs	r1, #15
 80008ba:	fa01 f202 	lsl.w	r2, r1, r2
 80008be:	43d2      	mvns	r2, r2
 80008c0:	4611      	mov	r1, r2
 80008c2:	4a20      	ldr	r2, [pc, #128]	; (8000944 <MCAL_GPIO_SetPinMode+0x1c8>)
 80008c4:	400b      	ands	r3, r1
 80008c6:	6013      	str	r3, [r2, #0]
            MCAL_GPIOC->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MCAL_GPIO_SetPinMode+0x1c8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	7979      	ldrb	r1, [r7, #5]
 80008ce:	79ba      	ldrb	r2, [r7, #6]
 80008d0:	0092      	lsls	r2, r2, #2
 80008d2:	fa01 f202 	lsl.w	r2, r1, r2
 80008d6:	4611      	mov	r1, r2
 80008d8:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <MCAL_GPIO_SetPinMode+0x1c8>)
 80008da:	430b      	orrs	r3, r1
 80008dc:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80008de:	2301      	movs	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 80008e2:	e025      	b.n	8000930 <MCAL_GPIO_SetPinMode+0x1b4>
        }else if ( Copy_PinID < 16)
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	2b0f      	cmp	r3, #15
 80008e8:	d81c      	bhi.n	8000924 <MCAL_GPIO_SetPinMode+0x1a8>
            Copy_PinID=Copy_PinID-8;
 80008ea:	79bb      	ldrb	r3, [r7, #6]
 80008ec:	3b08      	subs	r3, #8
 80008ee:	71bb      	strb	r3, [r7, #6]
            MCAL_GPIOC->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MCAL_GPIO_SetPinMode+0x1c8>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	79ba      	ldrb	r2, [r7, #6]
 80008f6:	0092      	lsls	r2, r2, #2
 80008f8:	210f      	movs	r1, #15
 80008fa:	fa01 f202 	lsl.w	r2, r1, r2
 80008fe:	43d2      	mvns	r2, r2
 8000900:	4611      	mov	r1, r2
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <MCAL_GPIO_SetPinMode+0x1c8>)
 8000904:	400b      	ands	r3, r1
 8000906:	6053      	str	r3, [r2, #4]
            MCAL_GPIOC->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MCAL_GPIO_SetPinMode+0x1c8>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	7979      	ldrb	r1, [r7, #5]
 800090e:	79ba      	ldrb	r2, [r7, #6]
 8000910:	0092      	lsls	r2, r2, #2
 8000912:	fa01 f202 	lsl.w	r2, r1, r2
 8000916:	4611      	mov	r1, r2
 8000918:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <MCAL_GPIO_SetPinMode+0x1c8>)
 800091a:	430b      	orrs	r3, r1
 800091c:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 800091e:	2301      	movs	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
    break;
 8000922:	e005      	b.n	8000930 <MCAL_GPIO_SetPinMode+0x1b4>
            Local_FunctionStatus = E_NOT_OK;
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]
    break;
 8000928:	e002      	b.n	8000930 <MCAL_GPIO_SetPinMode+0x1b4>
    default:
            Local_FunctionStatus = E_NOT_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]
    break;
 800092e:	bf00      	nop
    }
    return Local_FunctionStatus;
 8000930:	7bfb      	ldrb	r3, [r7, #15]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40010800 	.word	0x40010800
 8000940:	40010c00 	.word	0x40010c00
 8000944:	40011000 	.word	0x40011000

08000948 <MCAL_GPIO_SetPinValue>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_GPIO_SetPinValue(u8 Copy_PortID , u8 Copy_PinID , u8 Copy_PinValue)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	460b      	mov	r3, r1
 8000954:	71bb      	strb	r3, [r7, #6]
 8000956:	4613      	mov	r3, r2
 8000958:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	73fb      	strb	r3, [r7, #15]
    switch (Copy_PortID)
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d04e      	beq.n	8000a02 <MCAL_GPIO_SetPinValue+0xba>
 8000964:	2b02      	cmp	r3, #2
 8000966:	dc70      	bgt.n	8000a4a <MCAL_GPIO_SetPinValue+0x102>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <MCAL_GPIO_SetPinValue+0x2a>
 800096c:	2b01      	cmp	r3, #1
 800096e:	d024      	beq.n	80009ba <MCAL_GPIO_SetPinValue+0x72>
 8000970:	e06b      	b.n	8000a4a <MCAL_GPIO_SetPinValue+0x102>
    {
    case GPIO_PORTA:
        switch (Copy_PinValue)
 8000972:	797b      	ldrb	r3, [r7, #5]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d00e      	beq.n	8000996 <MCAL_GPIO_SetPinValue+0x4e>
 8000978:	2b01      	cmp	r3, #1
 800097a:	d11a      	bne.n	80009b2 <MCAL_GPIO_SetPinValue+0x6a>
        {
        case GPIO_HIGH:
            SET_BIT( (MCAL_GPIOA->ODR) , Copy_PinID);
 800097c:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <MCAL_GPIO_SetPinValue+0x114>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	79ba      	ldrb	r2, [r7, #6]
 8000982:	2101      	movs	r1, #1
 8000984:	fa01 f202 	lsl.w	r2, r1, r2
 8000988:	4611      	mov	r1, r2
 800098a:	4a34      	ldr	r2, [pc, #208]	; (8000a5c <MCAL_GPIO_SetPinValue+0x114>)
 800098c:	430b      	orrs	r3, r1
 800098e:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000990:	2301      	movs	r3, #1
 8000992:	73fb      	strb	r3, [r7, #15]
            break;
 8000994:	e010      	b.n	80009b8 <MCAL_GPIO_SetPinValue+0x70>
        case GPIO_LOW:
            CLR_BIT( (MCAL_GPIOA->ODR) , Copy_PinID);
 8000996:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <MCAL_GPIO_SetPinValue+0x114>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	79ba      	ldrb	r2, [r7, #6]
 800099c:	2101      	movs	r1, #1
 800099e:	fa01 f202 	lsl.w	r2, r1, r2
 80009a2:	43d2      	mvns	r2, r2
 80009a4:	4611      	mov	r1, r2
 80009a6:	4a2d      	ldr	r2, [pc, #180]	; (8000a5c <MCAL_GPIO_SetPinValue+0x114>)
 80009a8:	400b      	ands	r3, r1
 80009aa:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 80009ac:	2301      	movs	r3, #1
 80009ae:	73fb      	strb	r3, [r7, #15]
            break;
 80009b0:	e002      	b.n	80009b8 <MCAL_GPIO_SetPinValue+0x70>
        default:
            Local_FunctionStatus = E_NOT_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
            break;
 80009b6:	bf00      	nop
        }
    break;
 80009b8:	e04a      	b.n	8000a50 <MCAL_GPIO_SetPinValue+0x108>
    case GPIO_PORTB:
        switch (Copy_PinValue)
 80009ba:	797b      	ldrb	r3, [r7, #5]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00e      	beq.n	80009de <MCAL_GPIO_SetPinValue+0x96>
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d11a      	bne.n	80009fa <MCAL_GPIO_SetPinValue+0xb2>
        {
        case GPIO_HIGH:
            SET_BIT(MCAL_GPIOB->ODR , Copy_PinID);
 80009c4:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <MCAL_GPIO_SetPinValue+0x118>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	79ba      	ldrb	r2, [r7, #6]
 80009ca:	2101      	movs	r1, #1
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	4611      	mov	r1, r2
 80009d2:	4a23      	ldr	r2, [pc, #140]	; (8000a60 <MCAL_GPIO_SetPinValue+0x118>)
 80009d4:	430b      	orrs	r3, r1
 80009d6:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 80009d8:	2301      	movs	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
            break;
 80009dc:	e010      	b.n	8000a00 <MCAL_GPIO_SetPinValue+0xb8>
        case GPIO_LOW:
            CLR_BIT(MCAL_GPIOB->ODR , Copy_PinID);
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MCAL_GPIO_SetPinValue+0x118>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	79ba      	ldrb	r2, [r7, #6]
 80009e4:	2101      	movs	r1, #1
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	43d2      	mvns	r2, r2
 80009ec:	4611      	mov	r1, r2
 80009ee:	4a1c      	ldr	r2, [pc, #112]	; (8000a60 <MCAL_GPIO_SetPinValue+0x118>)
 80009f0:	400b      	ands	r3, r1
 80009f2:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
            break;
 80009f8:	e002      	b.n	8000a00 <MCAL_GPIO_SetPinValue+0xb8>
        default:
            Local_FunctionStatus = E_NOT_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	73fb      	strb	r3, [r7, #15]
            break;
 80009fe:	bf00      	nop
        }
    break;
 8000a00:	e026      	b.n	8000a50 <MCAL_GPIO_SetPinValue+0x108>
    case GPIO_PORTC:
        switch (Copy_PinValue)
 8000a02:	797b      	ldrb	r3, [r7, #5]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d00e      	beq.n	8000a26 <MCAL_GPIO_SetPinValue+0xde>
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d11a      	bne.n	8000a42 <MCAL_GPIO_SetPinValue+0xfa>
        {
        case GPIO_HIGH:
            SET_BIT(MCAL_GPIOC->ODR , Copy_PinID);
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MCAL_GPIO_SetPinValue+0x11c>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	79ba      	ldrb	r2, [r7, #6]
 8000a12:	2101      	movs	r1, #1
 8000a14:	fa01 f202 	lsl.w	r2, r1, r2
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <MCAL_GPIO_SetPinValue+0x11c>)
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
            break;
 8000a24:	e010      	b.n	8000a48 <MCAL_GPIO_SetPinValue+0x100>
        case GPIO_LOW:
            CLR_BIT(MCAL_GPIOC->ODR , Copy_PinID);
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MCAL_GPIO_SetPinValue+0x11c>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	79ba      	ldrb	r2, [r7, #6]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a32:	43d2      	mvns	r2, r2
 8000a34:	4611      	mov	r1, r2
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <MCAL_GPIO_SetPinValue+0x11c>)
 8000a38:	400b      	ands	r3, r1
 8000a3a:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
            break;
 8000a40:	e002      	b.n	8000a48 <MCAL_GPIO_SetPinValue+0x100>
        default:
            Local_FunctionStatus = E_NOT_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	73fb      	strb	r3, [r7, #15]
            break;
 8000a46:	bf00      	nop
        }
    break;
 8000a48:	e002      	b.n	8000a50 <MCAL_GPIO_SetPinValue+0x108>
    default:
        Local_FunctionStatus = E_NOT_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8000a4e:	bf00      	nop
    }
    return Local_FunctionStatus;
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40010c00 	.word	0x40010c00
 8000a64:	40011000 	.word	0x40011000

08000a68 <LCD_Init>:
/**
 * @brief Initializes the LCD driver based on the configured mode (8-bit or 4-bit).
 *
 * @retval Std_ReturnType returns E_OK if initialization is successful, E_NOK if an error occurs during initialization.
 */
Std_ReturnType LCD_Init(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
    // Variable to track the function status, initially set to E_NOT_OK
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71fb      	strb	r3, [r7, #7]

    // Initialize the system tick timer
    MCAL_SYSTICK_vINIT();
 8000a72:	f000 fa0b 	bl	8000e8c <MCAL_SYSTICK_vINIT>
        // Update function status to indicate successful initialization
        Local_FunctionStatus = E_OK;

    #elif LCD_MODE == LCD_MODE_4_BIT
        // Set control pins and data pins for 4-bit mode
        MCAL_GPIO_SetPinMode(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 8000a76:	2201      	movs	r2, #1
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fe7e 	bl	800077c <MCAL_GPIO_SetPinMode>
        MCAL_GPIO_SetPinMode(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2101      	movs	r1, #1
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fe79 	bl	800077c <MCAL_GPIO_SetPinMode>
        MCAL_GPIO_SetPinMode(LCD_DATA_PORT, LCD_D4_PIN, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2106      	movs	r1, #6
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff fe74 	bl	800077c <MCAL_GPIO_SetPinMode>
        MCAL_GPIO_SetPinMode(LCD_DATA_PORT, LCD_D5_PIN, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2107      	movs	r1, #7
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fe6f 	bl	800077c <MCAL_GPIO_SetPinMode>
        MCAL_GPIO_SetPinMode(LCD_DATA_PORT, LCD_D6_PIN, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2108      	movs	r1, #8
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fe6a 	bl	800077c <MCAL_GPIO_SetPinMode>
        MCAL_GPIO_SetPinMode(LCD_DATA_PORT, LCD_D7_PIN, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2109      	movs	r1, #9
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff fe65 	bl	800077c <MCAL_GPIO_SetPinMode>

        // Delay for LCD startup (30ms)
        MCAL_SYSTICK_DelayMS(30);
 8000ab2:	4816      	ldr	r0, [pc, #88]	; (8000b0c <LCD_Init+0xa4>)
 8000ab4:	f000 fa2e 	bl	8000f14 <MCAL_SYSTICK_DelayMS>

        // LCD initialization sequence for 4-bit mode
        LCD_SendCmnd(LCD_HOME);
 8000ab8:	2002      	movs	r0, #2
 8000aba:	f000 f829 	bl	8000b10 <LCD_SendCmnd>
        MCAL_SYSTICK_DelayMS(1);
 8000abe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000ac2:	f000 fa27 	bl	8000f14 <MCAL_SYSTICK_DelayMS>
        LCD_SendCmnd(LCD_FUNCTIONSET4BIT);
 8000ac6:	2028      	movs	r0, #40	; 0x28
 8000ac8:	f000 f822 	bl	8000b10 <LCD_SendCmnd>
        MCAL_SYSTICK_DelayMS(1);
 8000acc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000ad0:	f000 fa20 	bl	8000f14 <MCAL_SYSTICK_DelayMS>
        LCD_SendCmnd(LCD_DISPLAYON);
 8000ad4:	200c      	movs	r0, #12
 8000ad6:	f000 f81b 	bl	8000b10 <LCD_SendCmnd>
        MCAL_SYSTICK_DelayMS(1);
 8000ada:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000ade:	f000 fa19 	bl	8000f14 <MCAL_SYSTICK_DelayMS>
        LCD_SendCmnd(LCD_CLEAR);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f000 f814 	bl	8000b10 <LCD_SendCmnd>
        MCAL_SYSTICK_DelayMS(1);
 8000ae8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000aec:	f000 fa12 	bl	8000f14 <MCAL_SYSTICK_DelayMS>
        LCD_SendCmnd(LCD_ENTRYMODE);
 8000af0:	2006      	movs	r0, #6
 8000af2:	f000 f80d 	bl	8000b10 <LCD_SendCmnd>
        MCAL_SYSTICK_DelayMS(1);
 8000af6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000afa:	f000 fa0b 	bl	8000f14 <MCAL_SYSTICK_DelayMS>

        // Update function status to indicate successful initialization
        Local_FunctionStatus = E_OK;
 8000afe:	2301      	movs	r3, #1
 8000b00:	71fb      	strb	r3, [r7, #7]
        Local_FunctionStatus = E_NOT_OK;

    #endif

    // Return the function status indicating the success or failure of the initialization
    return Local_FunctionStatus;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	41f00000 	.word	0x41f00000

08000b10 <LCD_SendCmnd>:
 *
 * @param[in] Copy_Cmnd The command to be sent to the LCD.
 * @retval Std_ReturnType returns E_OK if the command sending is successful, E_NOK if an error occurs during the process.
 */
Std_ReturnType LCD_SendCmnd(u8 Copy_Cmnd)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
    // Variable to track the function status, initially set to E_NOT_OK
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	73fb      	strb	r3, [r7, #15]
        // Update function status to indicate successful command transmission
        Local_FunctionStatus = E_OK;

    #elif LCD_MODE == LCD_MODE_4_BIT
        // Set RS pin to low for command transmission
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_LOW);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ff10 	bl	8000948 <MCAL_GPIO_SetPinValue>

        // Set data pins with higher nibble of the command
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_Cmnd, 7));
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	09db      	lsrs	r3, r3, #7
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	2109      	movs	r1, #9
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff ff08 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_Cmnd, 6));
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	119b      	asrs	r3, r3, #6
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	461a      	mov	r2, r3
 8000b46:	2108      	movs	r1, #8
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff fefd 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_Cmnd, 5));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	115b      	asrs	r3, r3, #5
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2107      	movs	r1, #7
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fef2 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_Cmnd, 4));
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	111b      	asrs	r3, r3, #4
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	2106      	movs	r1, #6
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fee7 	bl	8000948 <MCAL_GPIO_SetPinValue>

        // Pulse the E pin to send higher nibble of the command
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_HIGH);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff fee2 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_SYSTICK_DelayMS(2); // Delay for LCD processing
 8000b84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b88:	f000 f9c4 	bl	8000f14 <MCAL_SYSTICK_DelayMS>
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_LOW);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2101      	movs	r1, #1
 8000b90:	2000      	movs	r0, #0
 8000b92:	f7ff fed9 	bl	8000948 <MCAL_GPIO_SetPinValue>

        // Set data pins with lower nibble of the command
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_Cmnd, 3));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	10db      	asrs	r3, r3, #3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	2109      	movs	r1, #9
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f7ff fece 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_Cmnd, 2));
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	109b      	asrs	r3, r3, #2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	2108      	movs	r1, #8
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff fec3 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_Cmnd, 1));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	105b      	asrs	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	461a      	mov	r2, r3
 8000bd0:	2107      	movs	r1, #7
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff feb8 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_Cmnd, 0));
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	461a      	mov	r2, r3
 8000be2:	2106      	movs	r1, #6
 8000be4:	2000      	movs	r0, #0
 8000be6:	f7ff feaf 	bl	8000948 <MCAL_GPIO_SetPinValue>

        // Pulse the E pin to send lower nibble of the command
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_HIGH);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2101      	movs	r1, #1
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff feaa 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_SYSTICK_DelayMS(2); // Delay for LCD processing
 8000bf4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bf8:	f000 f98c 	bl	8000f14 <MCAL_SYSTICK_DelayMS>
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_LOW);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2101      	movs	r1, #1
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fea1 	bl	8000948 <MCAL_GPIO_SetPinValue>

        // Update function status to indicate successful command transmission
        Local_FunctionStatus = E_OK;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]
        Local_FunctionStatus = E_NOT_OK;

    #endif

    // Return the function status indicating the success or failure of the command transmission
    return Local_FunctionStatus;
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <LCD_SendChar>:
 *
 * @param[in] Copy_Data The character data to be sent to the LCD for display.
 * @retval Std_ReturnType returns E_OK if the character sending is successful, E_NOK if an error occurs during the process.
 */
Std_ReturnType LCD_SendChar(u8 Copy_Data)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
    // Variable to track the function status, initially set to E_NOT_OK
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]
        // Update function status to indicate successful character transmission
        Local_FunctionStatus = E_OK;

    #elif LCD_MODE == LCD_MODE_4_BIT
        // Set RS pin high for character transmission
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, GPIO_HIGH);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2100      	movs	r1, #0
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fe8e 	bl	8000948 <MCAL_GPIO_SetPinValue>

        // Set data pins with higher nibble of the character
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_Data, 7));
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	09db      	lsrs	r3, r3, #7
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	2109      	movs	r1, #9
 8000c36:	2000      	movs	r0, #0
 8000c38:	f7ff fe86 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_Data, 6));
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	119b      	asrs	r3, r3, #6
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	2108      	movs	r1, #8
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fe7b 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_Data, 5));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	115b      	asrs	r3, r3, #5
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	2107      	movs	r1, #7
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fe70 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_Data, 4));
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	111b      	asrs	r3, r3, #4
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	461a      	mov	r2, r3
 8000c76:	2106      	movs	r1, #6
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fe65 	bl	8000948 <MCAL_GPIO_SetPinValue>

        // Pulse the E pin to send higher nibble of the character
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_HIGH);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2101      	movs	r1, #1
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff fe60 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_SYSTICK_DelayMS(2); // Delay for LCD processing
 8000c88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c8c:	f000 f942 	bl	8000f14 <MCAL_SYSTICK_DelayMS>
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_LOW);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2101      	movs	r1, #1
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff fe57 	bl	8000948 <MCAL_GPIO_SetPinValue>

        // Set data pins with lower nibble of the character
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_Data, 3));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	10db      	asrs	r3, r3, #3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	2109      	movs	r1, #9
 8000caa:	2000      	movs	r0, #0
 8000cac:	f7ff fe4c 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_Data, 2));
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	109b      	asrs	r3, r3, #2
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff fe41 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_Data, 1));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	105b      	asrs	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	2107      	movs	r1, #7
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fe36 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_GPIO_SetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_Data, 0));
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	2106      	movs	r1, #6
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff fe2d 	bl	8000948 <MCAL_GPIO_SetPinValue>

        // Pulse the E pin to send lower nibble of the character
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_HIGH);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff fe28 	bl	8000948 <MCAL_GPIO_SetPinValue>
        MCAL_SYSTICK_DelayMS(2); // Delay for LCD processing
 8000cf8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cfc:	f000 f90a 	bl	8000f14 <MCAL_SYSTICK_DelayMS>
        MCAL_GPIO_SetPinValue(LCD_CONTROL_PORT, LCD_E_PIN, GPIO_LOW);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2101      	movs	r1, #1
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff fe1f 	bl	8000948 <MCAL_GPIO_SetPinValue>

        // Update function status to indicate successful character transmission
        Local_FunctionStatus = E_OK;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	73fb      	strb	r3, [r7, #15]
        Local_FunctionStatus = E_NOT_OK;

    #endif

    // Return the function status indicating the success or failure of the character transmission
    return Local_FunctionStatus;
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <LCD_SendString>:
 *
 * @param[in] Copy_String Pointer to the string of characters to be displayed on the LCD.
 * @retval Std_ReturnType returns E_OK if the string sending is successful, E_NOK if an error occurs during the process.
 */ 
Std_ReturnType LCD_SendString (u8* Copy_String)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    // Variable to track the function status, initially set to E_NOT_OK
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	73bb      	strb	r3, [r7, #14]
    // Loop through each character in the string until the null terminator is encountered
    for (u8 Local_i = 0; Copy_String[Local_i] != '\0'; Local_i++) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e009      	b.n	8000d3e <LCD_SendString+0x26>
        // Send each character of the string to be displayed on the LCD
        LCD_SendChar(Copy_String[Local_i]);
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	4413      	add	r3, r2
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff6e 	bl	8000c14 <LCD_SendChar>
    for (u8 Local_i = 0; Copy_String[Local_i] != '\0'; Local_i++) {
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	4413      	add	r3, r2
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1ef      	bne.n	8000d2a <LCD_SendString+0x12>
    }

    // All characters sent successfully, update function status to indicate success
    Local_FunctionStatus = E_OK;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73bb      	strb	r3, [r7, #14]

    // Return the function status indicating the success or failure of string transmission
    return Local_FunctionStatus;
 8000d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <LCD_Gotoyx>:
 * @param[in] Copy_Y The vertical position (row) on the LCD.
 * @param[in] Copy_X The horizontal position (column) on the LCD.
 * @retval Std_ReturnType returns E_OK if cursor positioning is successful, E_NOK if an error occurs during the process.
 */
Std_ReturnType LCD_Gotoyx(u8 Copy_Y,u8 Copy_X)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
    // Variable to track the function status, initially set to E_NOT_OK
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]

    u8 Local_Address = 0; // Variable to hold the calculated LCD address
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73bb      	strb	r3, [r7, #14]

    // Check if the provided row (Y) and column (X) values are within valid range
    if (Copy_Y < 2 && Copy_X < 16) {
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d812      	bhi.n	8000d9c <LCD_Gotoyx+0x44>
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80f      	bhi.n	8000d9c <LCD_Gotoyx+0x44>
        // Calculate the corresponding address based on row and column
    	Local_Address = (Copy_Y * 0x40) + Copy_X;
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	019b      	lsls	r3, r3, #6
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	79bb      	ldrb	r3, [r7, #6]
 8000d84:	4413      	add	r3, r2
 8000d86:	73bb      	strb	r3, [r7, #14]

    	Local_Address = SET_BIT(Local_Address, 7); // Set bit 7 for addressing the DDRAM
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d8e:	73bb      	strb	r3, [r7, #14]
        // Send command to the LCD to set the cursor to the calculated position
        LCD_SendCmnd(Local_Address);
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff febc 	bl	8000b10 <LCD_SendCmnd>
        // Update function status to indicate successful cursor positioning
        Local_FunctionStatus = E_OK;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
    }

    // Return the function status indicating the success or failure of cursor positioning
    return Local_FunctionStatus;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <MCAL_RCC_InitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"
#include "RCC_interface.h"
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType MCAL_RCC_InitSysClock(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	71fb      	strb	r3, [r7, #7]
    #if RCC_SYSCLK == RCC_HSI
        /* Enable HSI */
        SET_BIT( RCC_CR , RCC_CR_HSION);
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <MCAL_RCC_InitSysClock+0x4c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <MCAL_RCC_InitSysClock+0x4c>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6013      	str	r3, [r2, #0]
        /* Wait until the clock is stable */
        while( !GET_BIT( RCC_CR , RCC_CR_HSIRDY ) );
 8000dbe:	bf00      	nop
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MCAL_RCC_InitSysClock+0x4c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f9      	beq.n	8000dc0 <MCAL_RCC_InitSysClock+0x18>
        /* Select the HSI As system CLOCK */
        CLR_BIT( RCC_CFGR , 0 );
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <MCAL_RCC_InitSysClock+0x50>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <MCAL_RCC_InitSysClock+0x50>)
 8000dd2:	f023 0301 	bic.w	r3, r3, #1
 8000dd6:	6013      	str	r3, [r2, #0]
        CLR_BIT( RCC_CFGR , 1 );
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <MCAL_RCC_InitSysClock+0x50>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <MCAL_RCC_InitSysClock+0x50>)
 8000dde:	f023 0302 	bic.w	r3, r3, #2
 8000de2:	6013      	str	r3, [r2, #0]
        local_functionStates = E_OK;
 8000de4:	2301      	movs	r3, #1
 8000de6:	71fb      	strb	r3, [r7, #7]
            #error "Wrong Choice !!"
        #endif /* RCC_PLL_SRC */
    #else 
        #error "Wrong Choice !!"
    #endif /* RCC_SYSCLK */
    return local_functionStates;
 8000de8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40021004 	.word	0x40021004

08000dfc <MCAL_Rcc_EnablePrephiral>:
/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_Rcc_EnablePrephiral(u8 Copy_PeripheralId , u8 Copy_BusId)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	460a      	mov	r2, r1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]
    switch (Copy_BusId)
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d020      	beq.n	8000e58 <MCAL_Rcc_EnablePrephiral+0x5c>
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	dc2b      	bgt.n	8000e72 <MCAL_Rcc_EnablePrephiral+0x76>
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <MCAL_Rcc_EnablePrephiral+0x28>
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d00d      	beq.n	8000e3e <MCAL_Rcc_EnablePrephiral+0x42>
 8000e22:	e026      	b.n	8000e72 <MCAL_Rcc_EnablePrephiral+0x76>
    {
    case RCC_AHB:
    SET_BIT( RCC_AHBENR , Copy_PeripheralId );
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MCAL_Rcc_EnablePrephiral+0x88>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	79fa      	ldrb	r2, [r7, #7]
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	4611      	mov	r1, r2
 8000e32:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <MCAL_Rcc_EnablePrephiral+0x88>)
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8000e3c:	e01c      	b.n	8000e78 <MCAL_Rcc_EnablePrephiral+0x7c>
    case RCC_APB1:
    SET_BIT ( RCC_AHBENR , Copy_PeripheralId );
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MCAL_Rcc_EnablePrephiral+0x88>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	79fa      	ldrb	r2, [r7, #7]
 8000e44:	2101      	movs	r1, #1
 8000e46:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <MCAL_Rcc_EnablePrephiral+0x88>)
 8000e4e:	430b      	orrs	r3, r1
 8000e50:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
    break;
 8000e56:	e00f      	b.n	8000e78 <MCAL_Rcc_EnablePrephiral+0x7c>
    case RCC_APB2:
    SET_BIT ( RCC_APB2ENR , Copy_PeripheralId );
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MCAL_Rcc_EnablePrephiral+0x8c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	79fa      	ldrb	r2, [r7, #7]
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	4611      	mov	r1, r2
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <MCAL_Rcc_EnablePrephiral+0x8c>)
 8000e68:	430b      	orrs	r3, r1
 8000e6a:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8000e70:	e002      	b.n	8000e78 <MCAL_Rcc_EnablePrephiral+0x7c>
    default:
    local_functionStates =E_NOT_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	73fb      	strb	r3, [r7, #15]
    break;
 8000e76:	bf00      	nop
    }
    return local_functionStates;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	40021014 	.word	0x40021014
 8000e88:	40021018 	.word	0x40021018

08000e8c <MCAL_SYSTICK_vINIT>:
    SYSTICK->LOAD = Copy_Ticks;
    Local_FunctionStatus= E_OK;
    return Local_FunctionStatus;
}
Std_ReturnType MCAL_SYSTICK_vINIT()
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	71fb      	strb	r3, [r7, #7]
    /**< Disable SysTick timer */
    SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <MCAL_SYSTICK_vINIT+0x40>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <MCAL_SYSTICK_vINIT+0x40>)
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	6013      	str	r3, [r2, #0]
    /**< Configure SysTick timer to use the processor clock */
    #if SYSTICK_AHB_CLKSRC == SYSTICK_CLKSRC_DIV_1
        SYSTICK->CTRL |= SYSTICK_CTRL_CLKSRC_MASK; /**< Set bit 2 to use the processor clock */
    #elif SYSTICK_AHB_CLKSRC == SYSTICK_CLKSRC_DIV_8
        SYSTICK->CTRL &= ~SYSTICK_CTRL_CLKSRC_MASK;  /**< Clear bit 2 to use the processor clock/8 */
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <MCAL_SYSTICK_vINIT+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <MCAL_SYSTICK_vINIT+0x40>)
 8000ea8:	f023 0304 	bic.w	r3, r3, #4
 8000eac:	6013      	str	r3, [r2, #0]
    #else
        #error "Invalid STK_CTRL_CLKSOURCE value. Please choose STK_CTRL_CLKSOURCE_1 or STK_CTRL_CLKSOURCE_8."
    #endif
    /**< Generate interrupt when it reaches zero */
    #if SYSTICK_TICKINT == SYSTICK_TICKINT_ENABLED
        SYSTICK->CTRL |= SYSTICK_CTRL_TICKINT_MASK; /**< Set bit 1 to enable interrupt when the counter reaches zero */
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <MCAL_SYSTICK_vINIT+0x40>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <MCAL_SYSTICK_vINIT+0x40>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6013      	str	r3, [r2, #0]
    #elif SYSTICK_TICKINT == SYSTICK_TICKINT_DISABLED
        SYSTICK->CTRL &= ~SYSTICK_CTRL_TICKINT_MASK; /**< Clear bit 1 to disable interrupt when the counter reaches zero */
    #else
        #error "Invalid STK_CTRL_TICKINT value. Please choose STK_CTRL_TICKINT_ENABLE or STK_CTRL_TICKINT_DISABLE."
    #endif
    Local_FunctionStatus= E_OK;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	71fb      	strb	r3, [r7, #7]
    return Local_FunctionStatus;
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <MCAL_SYSTICK_Reset>:
    Local_FunctionStatus=E_OK;
    return Local_FunctionStatus;
}

Std_ReturnType MCAL_SYSTICK_Reset()
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    /**< Disable SysTick timer */
    SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <MCAL_SYSTICK_Reset+0x40>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a0c      	ldr	r2, [pc, #48]	; (8000f10 <MCAL_SYSTICK_Reset+0x40>)
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6013      	str	r3, [r2, #0]
    /**< Set the reload value to 0 */
    SYSTICK->LOAD=0;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <MCAL_SYSTICK_Reset+0x40>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
    /**< Clear the current value */
    SYSTICK->VAL=0;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MCAL_SYSTICK_Reset+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
    /**< Clear the count flag */
    SYSTICK->CTRL &= ~SYSTICK_CTRL_COUNTFLAG_MASK;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <MCAL_SYSTICK_Reset+0x40>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <MCAL_SYSTICK_Reset+0x40>)
 8000ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efc:	6013      	str	r3, [r2, #0]
    Local_FunctionStatus=E_OK;
 8000efe:	2301      	movs	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
    return Local_FunctionStatus;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <MCAL_SYSTICK_DelayMS>:
    }
    return Local_FunctionStatus;
}

Std_ReturnType MCAL_SYSTICK_DelayMS(f32 Copy_MilliSeconds)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	77fb      	strb	r3, [r7, #31]
    /**< Calculate the number of ticks required for the given microseconds */ 
    u32 Local_TickRequired = (u32)(Copy_MilliSeconds * (STK_AHB_CLK / 1000.0));
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff fbb3 	bl	800068c <__aeabi_f2d>
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	4b44      	ldr	r3, [pc, #272]	; (800103c <MCAL_SYSTICK_DelayMS+0x128>)
 8000f2c:	f7ff f920 	bl	8000170 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fc00 	bl	800073c <__aeabi_d2uiz>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	617b      	str	r3, [r7, #20]
    /**< Check if the ticks required is within the valid range */ 
    if (Local_TickRequired <= SYSTICK_RELOAD_MAX)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f46:	d21a      	bcs.n	8000f7e <MCAL_SYSTICK_DelayMS+0x6a>
    {
        /**< Set the reload value of the SysTick timer */ 
        SYSTICK->LOAD = Local_TickRequired;
 8000f48:	4a3d      	ldr	r2, [pc, #244]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	6053      	str	r3, [r2, #4]
        /**< Enable the SysTick timer */ 
        SYSTICK->CTRL |= SYSTICK_CTRL_ENABLE_MASK;
 8000f4e:	4b3c      	ldr	r3, [pc, #240]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a3b      	ldr	r2, [pc, #236]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6013      	str	r3, [r2, #0]
        /**< Wait until the COUNTFLAG bit is set (indicates timer has counted down to zero) */ 
        while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG_MASK));
 8000f5a:	bf00      	nop
 8000f5c:	4b38      	ldr	r3, [pc, #224]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f9      	beq.n	8000f5c <MCAL_SYSTICK_DelayMS+0x48>
        /**< Disable the SysTick timer */ 
        SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8000f68:	4b35      	ldr	r3, [pc, #212]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a34      	ldr	r2, [pc, #208]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000f6e:	f023 0301 	bic.w	r3, r3, #1
 8000f72:	6013      	str	r3, [r2, #0]
        /**< Reset the timer value */ 
        MCAL_SYSTICK_Reset();
 8000f74:	f7ff ffac 	bl	8000ed0 <MCAL_SYSTICK_Reset>
        Local_FunctionStatus= E_OK;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	77fb      	strb	r3, [r7, #31]
 8000f7c:	e058      	b.n	8001030 <MCAL_SYSTICK_DelayMS+0x11c>
    }else if(Local_TickRequired > SYSTICK_RELOAD_MAX)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f84:	d352      	bcc.n	800102c <MCAL_SYSTICK_DelayMS+0x118>
    {
        /**< Calculate the number of Overflows */ 
        u32 Local_OverFlowCount = Local_TickRequired / SYSTICK_RELOAD_MAX;
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	f240 1301 	movw	r3, #257	; 0x101
 8000f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8000f90:	1ad2      	subs	r2, r2, r3
 8000f92:	0852      	lsrs	r2, r2, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	0ddb      	lsrs	r3, r3, #23
 8000f98:	613b      	str	r3, [r7, #16]
        /**< Check the first timer value to get the exact delay */  
        u32 Local_InitialValue = Local_TickRequired % SYSTICK_RELOAD_MAX;
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	f240 1301 	movw	r3, #257	; 0x101
 8000fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8000fa4:	1ad1      	subs	r1, r2, r3
 8000fa6:	0849      	lsrs	r1, r1, #1
 8000fa8:	440b      	add	r3, r1
 8000faa:	0dd9      	lsrs	r1, r3, #23
 8000fac:	460b      	mov	r3, r1
 8000fae:	061b      	lsls	r3, r3, #24
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	60fb      	str	r3, [r7, #12]
        /**< Set the reload value of the SysTick timer */ 
        SYSTICK->LOAD = Local_InitialValue;
 8000fb6:	4a22      	ldr	r2, [pc, #136]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6053      	str	r3, [r2, #4]
        /**< Enable the SysTick timer */ 
        SYSTICK->CTRL |= SYSTICK_CTRL_ENABLE_MASK;
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]
        /**< Wait until the COUNTFLAG bit is set (indicates timer has counted down to zero) */ 
        while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG_MASK));
 8000fc8:	bf00      	nop
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f9      	beq.n	8000fca <MCAL_SYSTICK_DelayMS+0xb6>
        /**< Disable the SysTick timer */ 
        SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a19      	ldr	r2, [pc, #100]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000fdc:	f023 0301 	bic.w	r3, r3, #1
 8000fe0:	6013      	str	r3, [r2, #0]
        /**< Set the reload value of the SysTick timer for the rest of the  */ 
        SYSTICK->LOAD = SYSTICK_RELOAD_MAX-1;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <MCAL_SYSTICK_DelayMS+0x130>)
 8000fe6:	605a      	str	r2, [r3, #4]
        /**< Enable the SysTick timer */ 
        SYSTICK->CTRL |= SYSTICK_CTRL_ENABLE_MASK;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6013      	str	r3, [r2, #0]
        /**< Loop untill there's no more OVF */ 
        for(u32 Local_Counter=0 ; Local_Counter<=Local_OverFlowCount ; Local_Counter++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	e009      	b.n	800100e <MCAL_SYSTICK_DelayMS+0xfa>
        {
            /**< Wait until the COUNTFLAG bit is set (indicates timer has counted down to zero) */ 
            while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG_MASK));
 8000ffa:	bf00      	nop
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f9      	beq.n	8000ffc <MCAL_SYSTICK_DelayMS+0xe8>
        for(u32 Local_Counter=0 ; Local_Counter<=Local_OverFlowCount ; Local_Counter++)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	3301      	adds	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	429a      	cmp	r2, r3
 8001014:	d9f1      	bls.n	8000ffa <MCAL_SYSTICK_DelayMS+0xe6>
        }
        /**< Disable the SysTick timer */ 
        SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a09      	ldr	r2, [pc, #36]	; (8001040 <MCAL_SYSTICK_DelayMS+0x12c>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	6013      	str	r3, [r2, #0]
        /**< Reset the SysTick timer */ 
        MCAL_SYSTICK_Reset();
 8001022:	f7ff ff55 	bl	8000ed0 <MCAL_SYSTICK_Reset>
        Local_FunctionStatus= E_OK;
 8001026:	2301      	movs	r3, #1
 8001028:	77fb      	strb	r3, [r7, #31]
 800102a:	e001      	b.n	8001030 <MCAL_SYSTICK_DelayMS+0x11c>
    }
    else
    {
        return Local_FunctionStatus;
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	e000      	b.n	8001032 <MCAL_SYSTICK_DelayMS+0x11e>
    }
    return Local_FunctionStatus;
 8001030:	7ffb      	ldrb	r3, [r7, #31]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3720      	adds	r7, #32
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40bf4000 	.word	0x40bf4000
 8001040:	e000e010 	.word	0xe000e010
 8001044:	00fffffe 	.word	0x00fffffe

08001048 <SysTick_Handler>:
/**
 * @defgroup IRQ_Handlers IRQ Handlers
 * @{
 */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
    if (SYSTICK_Callback != NULL)
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <SysTick_Handler+0x50>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d01e      	beq.n	8001092 <SysTick_Handler+0x4a>
    {
        if (SYSTICK_ModeOfInterval == SYSTICK_SINGLE_INTERVAL)
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <SysTick_Handler+0x54>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d111      	bne.n	8001080 <SysTick_Handler+0x38>
        {
            /**< Disable interrupt when the counter reaches zero */
            SYSTICK->CTRL &= ~SYSTICK_CTRL_TICKINT_MASK;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <SysTick_Handler+0x58>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <SysTick_Handler+0x58>)
 8001062:	f023 0302 	bic.w	r3, r3, #2
 8001066:	6013      	str	r3, [r2, #0]
            /**< Disable SysTick timer */
            SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <SysTick_Handler+0x58>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <SysTick_Handler+0x58>)
 800106e:	f023 0301 	bic.w	r3, r3, #1
 8001072:	6013      	str	r3, [r2, #0]
            /**< Clear the current value */
            SYSTICK->LOAD=0;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <SysTick_Handler+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
            /**< Set the reload value to 0 */
            SYSTICK->VAL=0;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <SysTick_Handler+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
        }
        /**< Callback notification */
        SYSTICK_Callback();
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Handler+0x50>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4798      	blx	r3
        /**< Clear the count/interrupt flag */
        SYSTICK->CTRL &= ~SYSTICK_CTRL_COUNTFLAG_MASK;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <SysTick_Handler+0x58>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <SysTick_Handler+0x58>)
 800108c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001090:	6013      	str	r3, [r2, #0]
    }
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000001c 	.word	0x2000001c
 800109c:	20000020 	.word	0x20000020
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <main>:
#include "RCC_interface.h"
#include "GPIO_interface.h"
#include "SYSTICK_interface.h"
#include "LCD_interface.h"
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	MCAL_RCC_InitSysClock();
 80010a8:	f7ff fe7e 	bl	8000da8 <MCAL_RCC_InitSysClock>
	MCAL_Rcc_EnablePrephiral(RCC_APB2_IOPAEN, RCC_APB2);
 80010ac:	2102      	movs	r1, #2
 80010ae:	2002      	movs	r0, #2
 80010b0:	f7ff fea4 	bl	8000dfc <MCAL_Rcc_EnablePrephiral>
	MCAL_SYSTICK_vINIT();
 80010b4:	f7ff feea 	bl	8000e8c <MCAL_SYSTICK_vINIT>
	LCD_Init();
 80010b8:	f7ff fcd6 	bl	8000a68 <LCD_Init>
	LCD_SendString("LULU");
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <main+0x30>)
 80010be:	f7ff fe2b 	bl	8000d18 <LCD_SendString>
	LCD_Gotoyx(1, 0);
 80010c2:	2100      	movs	r1, #0
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff fe47 	bl	8000d58 <LCD_Gotoyx>
	LCD_SendString("Mohamed");
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <main+0x34>)
 80010cc:	f7ff fe24 	bl	8000d18 <LCD_SendString>
    /* Loop forever */
	for(;;)
 80010d0:	e7fe      	b.n	80010d0 <main+0x2c>
 80010d2:	bf00      	nop
 80010d4:	08001190 	.word	0x08001190
 80010d8:	08001198 	.word	0x08001198

080010dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e6:	490d      	ldr	r1, [pc, #52]	; (800111c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <LoopForever+0xe>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010fc:	4c0a      	ldr	r4, [pc, #40]	; (8001128 <LoopForever+0x16>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800110a:	f000 f811 	bl	8001130 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110e:	f7ff ffc9 	bl	80010a4 <main>

08001112 <LoopForever>:

LoopForever:
  b LoopForever
 8001112:	e7fe      	b.n	8001112 <LoopForever>
  ldr   r0, =_estack
 8001114:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001120:	080011a8 	.word	0x080011a8
  ldr r2, =_sbss
 8001124:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001128:	20000024 	.word	0x20000024

0800112c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC1_2_IRQHandler>
	...

08001130 <__libc_init_array>:
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	2600      	movs	r6, #0
 8001134:	4d0c      	ldr	r5, [pc, #48]	; (8001168 <__libc_init_array+0x38>)
 8001136:	4c0d      	ldr	r4, [pc, #52]	; (800116c <__libc_init_array+0x3c>)
 8001138:	1b64      	subs	r4, r4, r5
 800113a:	10a4      	asrs	r4, r4, #2
 800113c:	42a6      	cmp	r6, r4
 800113e:	d109      	bne.n	8001154 <__libc_init_array+0x24>
 8001140:	f000 f81a 	bl	8001178 <_init>
 8001144:	2600      	movs	r6, #0
 8001146:	4d0a      	ldr	r5, [pc, #40]	; (8001170 <__libc_init_array+0x40>)
 8001148:	4c0a      	ldr	r4, [pc, #40]	; (8001174 <__libc_init_array+0x44>)
 800114a:	1b64      	subs	r4, r4, r5
 800114c:	10a4      	asrs	r4, r4, #2
 800114e:	42a6      	cmp	r6, r4
 8001150:	d105      	bne.n	800115e <__libc_init_array+0x2e>
 8001152:	bd70      	pop	{r4, r5, r6, pc}
 8001154:	f855 3b04 	ldr.w	r3, [r5], #4
 8001158:	4798      	blx	r3
 800115a:	3601      	adds	r6, #1
 800115c:	e7ee      	b.n	800113c <__libc_init_array+0xc>
 800115e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001162:	4798      	blx	r3
 8001164:	3601      	adds	r6, #1
 8001166:	e7f2      	b.n	800114e <__libc_init_array+0x1e>
 8001168:	080011a0 	.word	0x080011a0
 800116c:	080011a0 	.word	0x080011a0
 8001170:	080011a0 	.word	0x080011a0
 8001174:	080011a4 	.word	0x080011a4

08001178 <_init>:
 8001178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117a:	bf00      	nop
 800117c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800117e:	bc08      	pop	{r3}
 8001180:	469e      	mov	lr, r3
 8001182:	4770      	bx	lr

08001184 <_fini>:
 8001184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001186:	bf00      	nop
 8001188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800118a:	bc08      	pop	{r3}
 800118c:	469e      	mov	lr, r3
 800118e:	4770      	bx	lr
